
Week 12 SPI IO Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002988  08002988  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002990  08002990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  080029a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080029a4  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001838  00000000  00000000  0002a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e23  00000000  00000000  0002cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1a7  00000000  00000000  00041c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000836f2  00000000  00000000  0004bdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf49c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f4  00000000  00000000  000cf4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002958 	.word	0x08002958

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002958 	.word	0x08002958

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 faee 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f80c 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8d2 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8a6 	bl	800063c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80004f0:	f000 f86e 	bl	80005d0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	SPITxRx_Setup();
 80004f4:	f000 f95e 	bl	80007b4 <SPITxRx_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		SPITxRx_readIO();
 80004f8:	f000 f972 	bl	80007e0 <SPITxRx_readIO>
 80004fc:	e7fc      	b.n	80004f8 <main+0x1c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fa1a 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <SystemClock_Config+0xc8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <SystemClock_Config+0xc8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a20      	ldr	r2, [pc, #128]	; (80005cc <SystemClock_Config+0xcc>)
 800054a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fe1b 	bl	80011c0 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000590:	f000 f960 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2103      	movs	r1, #3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f87d 	bl	80016b0 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005bc:	f000 f94a 	bl	8000854 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_SPI3_Init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_SPI3_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_SPI3_Init+0x64>)
 80005dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_SPI3_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_SPI3_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_SPI3_Init+0x64>)
 80005f0:	2202      	movs	r2, #2
 80005f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_SPI3_Init+0x64>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_SPI3_Init+0x64>)
 80005fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000600:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_SPI3_Init+0x64>)
 8000604:	2228      	movs	r2, #40	; 0x28
 8000606:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_SPI3_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_SPI3_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_SPI3_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_SPI3_Init+0x64>)
 800061c:	220a      	movs	r2, #10
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_SPI3_Init+0x64>)
 8000622:	f001 fa65 	bl	8001af0 <HAL_SPI_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 f912 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028
 8000638:	40003c00 	.word	0x40003c00

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f001 fe82 	bl	800237c <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f8e9 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000080 	.word	0x20000080
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a3d      	ldr	r2, [pc, #244]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a36      	ldr	r2, [pc, #216]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <MX_GPIO_Init+0x114>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <MX_GPIO_Init+0x114>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_GPIO_Init+0x114>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_GPIO_Init+0x114>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_GPIO_Init+0x114>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0x114>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	481c      	ldr	r0, [pc, #112]	; (80007a8 <MX_GPIO_Init+0x118>)
 8000738:	f000 fd28 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2104      	movs	r1, #4
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <MX_GPIO_Init+0x11c>)
 8000742:	f000 fd23 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_GPIO_Init+0x120>)
 800075e:	f000 fb79 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000762:	2320      	movs	r3, #32
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0x118>)
 800077a:	f000 fb6b 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800077e:	2304      	movs	r3, #4
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_GPIO_Init+0x11c>)
 8000796:	f000 fb5d 	bl	8000e54 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40020800 	.word	0x40020800

080007b4 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */

void SPITxRx_Setup() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS select
 80007b8:	2200      	movs	r2, #0
 80007ba:	2104      	movs	r1, #4
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <SPITxRx_Setup+0x28>)
 80007be:	f000 fce5 	bl	800118c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f000 f9ee 	bl	8000ba4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deselect
 80007c8:	2201      	movs	r2, #1
 80007ca:	2104      	movs	r1, #4
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <SPITxRx_Setup+0x28>)
 80007ce:	f000 fcdd 	bl	800118c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 f9e6 	bl	8000ba4 <HAL_Delay>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40020c00 	.word	0x40020c00

080007e0 <SPITxRx_readIO>:

void SPITxRx_readIO() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 80007e4:	2104      	movs	r1, #4
 80007e6:	480f      	ldr	r0, [pc, #60]	; (8000824 <SPITxRx_readIO+0x44>)
 80007e8:	f000 fcb8 	bl	800115c <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d016      	beq.n	8000820 <SPITxRx_readIO+0x40>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS select
 80007f2:	2200      	movs	r2, #0
 80007f4:	2104      	movs	r1, #4
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <SPITxRx_readIO+0x44>)
 80007f8:	f000 fcc8 	bl	800118c <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <SPITxRx_readIO+0x48>)
 80007fe:	2241      	movs	r2, #65	; 0x41
 8000800:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <SPITxRx_readIO+0x48>)
 8000804:	2212      	movs	r2, #18
 8000806:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <SPITxRx_readIO+0x48>)
 800080a:	2200      	movs	r2, #0
 800080c:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SPITxRx_readIO+0x48>)
 8000810:	2200      	movs	r2, #0
 8000812:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000814:	2304      	movs	r3, #4
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <SPITxRx_readIO+0x4c>)
 8000818:	4903      	ldr	r1, [pc, #12]	; (8000828 <SPITxRx_readIO+0x48>)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <SPITxRx_readIO+0x50>)
 800081c:	f001 f9f2 	bl	8001c04 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40020c00 	.word	0x40020c00
 8000828:	200000d0 	.word	0x200000d0
 800082c:	200000c4 	.word	0x200000c4
 8000830:	20000028 	.word	0x20000028

08000834 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deselect
 800083c:	2201      	movs	r2, #1
 800083e:	2104      	movs	r1, #4
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000842:	f000 fca3 	bl	800118c <HAL_GPIO_WritePin>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020c00 	.word	0x40020c00

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fa74 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <HAL_SPI_MspInit+0x94>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d134      	bne.n	800093c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_SPI_MspInit+0x98>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <HAL_SPI_MspInit+0x98>)
 80008dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_SPI_MspInit+0x98>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_SPI_MspInit+0x98>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a14      	ldr	r2, [pc, #80]	; (8000948 <HAL_SPI_MspInit+0x98>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_SPI_MspInit+0x98>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091c:	2306      	movs	r3, #6
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_SPI_MspInit+0x9c>)
 8000928:	f000 fa94 	bl	8000e54 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2033      	movs	r0, #51	; 0x33
 8000932:	f000 fa36 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000936:	2033      	movs	r0, #51	; 0x33
 8000938:	f000 fa4f 	bl	8000dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40003c00 	.word	0x40003c00
 8000948:	40023800 	.word	0x40023800
 800094c:	40020800 	.word	0x40020800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12b      	bne.n	80009ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_UART_MspInit+0x8c>)
 80009c6:	f000 fa45 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f89a 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <SPI3_IRQHandler+0x10>)
 8000a3a:	f001 f977 	bl	8001d2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000028 	.word	0x20000028

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a96:	f7ff ffd7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f001 ff31 	bl	8002900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd1d 	bl	80004dc <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	08002998 	.word	0x08002998
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	200000e0 	.word	0x200000e0

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f94f 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f808 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff feb4 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x54>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x58>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f967 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00e      	b.n	8000b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d80a      	bhi.n	8000b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f000 f92f 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_InitTick+0x5c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	200000dc 	.word	0x200000dc

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200000dc 	.word	0x200000dc

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff ffee 	bl	8000b8c <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_Delay+0x44>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffde 	bl	8000b8c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff8e 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff29 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff3e 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff8e 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5d 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff31 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffa2 	bl	8000d48 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d004      	beq.n	8000e2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e00c      	b.n	8000e46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2205      	movs	r2, #5
 8000e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0201 	bic.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e159      	b.n	8001124 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	f040 8148 	bne.w	800111e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80a2 	beq.w	800111e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a56      	ldr	r2, [pc, #344]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b54      	ldr	r3, [pc, #336]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff6:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_GPIO_Init+0x2ec>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_GPIO_Init+0x2f0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x202>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <HAL_GPIO_Init+0x2f4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x1fe>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a47      	ldr	r2, [pc, #284]	; (800114c <HAL_GPIO_Init+0x2f8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x1fa>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x2fc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x1f6>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_GPIO_Init+0x300>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x1f2>
 8001042:	2304      	movs	r3, #4
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001046:	2307      	movs	r3, #7
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x204>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x204>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x2ec>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001076:	4b38      	ldr	r3, [pc, #224]	; (8001158 <HAL_GPIO_Init+0x304>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x304>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ee:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001118:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_GPIO_Init+0x304>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f aea2 	bls.w	8000e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e001      	b.n	800117e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e267      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d075      	beq.n	80012ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011de:	4b88      	ldr	r3, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d00c      	beq.n	8001204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ea:	4b85      	ldr	r3, [pc, #532]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d112      	bne.n	800121c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f6:	4b82      	ldr	r3, [pc, #520]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001202:	d10b      	bne.n	800121c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	4b7e      	ldr	r3, [pc, #504]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d05b      	beq.n	80012c8 <HAL_RCC_OscConfig+0x108>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d157      	bne.n	80012c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e242      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001224:	d106      	bne.n	8001234 <HAL_RCC_OscConfig+0x74>
 8001226:	4b76      	ldr	r3, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a75      	ldr	r2, [pc, #468]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e01d      	b.n	8001270 <HAL_RCC_OscConfig+0xb0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x98>
 800123e:	4b70      	ldr	r3, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6f      	ldr	r2, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b6d      	ldr	r3, [pc, #436]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6c      	ldr	r2, [pc, #432]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0xb0>
 8001258:	4b69      	ldr	r3, [pc, #420]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a68      	ldr	r2, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b66      	ldr	r3, [pc, #408]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a65      	ldr	r2, [pc, #404]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 800126a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fc88 	bl	8000b8c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fc84 	bl	8000b8c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e207      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0xc0>
 800129e:	e014      	b.n	80012ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc74 	bl	8000b8c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fc70 	bl	8000b8c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e1f3      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0xe8>
 80012c6:	e000      	b.n	80012ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d063      	beq.n	800139e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d6:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d11c      	bne.n	8001328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	4b41      	ldr	r3, [pc, #260]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_RCC_OscConfig+0x152>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e1c7      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4937      	ldr	r1, [pc, #220]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	e03a      	b.n	800139e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_OscConfig+0x244>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fc29 	bl	8000b8c <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fc25 	bl	8000b8c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e1a8      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4925      	ldr	r1, [pc, #148]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
 8001370:	e015      	b.n	800139e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_RCC_OscConfig+0x244>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fc08 	bl	8000b8c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fc04 	bl	8000b8c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e187      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d036      	beq.n	8001418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d016      	beq.n	80013e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_RCC_OscConfig+0x248>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fbe8 	bl	8000b8c <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fbe4 	bl	8000b8c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e167      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_RCC_OscConfig+0x240>)
 80013d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x200>
 80013de:	e01b      	b.n	8001418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_OscConfig+0x248>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fbd1 	bl	8000b8c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	e00e      	b.n	800140c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ee:	f7ff fbcd 	bl	8000b8c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d907      	bls.n	800140c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e150      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
 8001400:	40023800 	.word	0x40023800
 8001404:	42470000 	.word	0x42470000
 8001408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ea      	bne.n	80013ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 8097 	beq.w	8001554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10f      	bne.n	8001456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a7c      	ldr	r2, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001452:	2301      	movs	r3, #1
 8001454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	4b77      	ldr	r3, [pc, #476]	; (8001634 <HAL_RCC_OscConfig+0x474>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d118      	bne.n	8001494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001462:	4b74      	ldr	r3, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x474>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a73      	ldr	r2, [pc, #460]	; (8001634 <HAL_RCC_OscConfig+0x474>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146e:	f7ff fb8d 	bl	8000b8c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7ff fb89 	bl	8000b8c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e10c      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x474>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x2ea>
 800149c:	4b64      	ldr	r3, [pc, #400]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a63      	ldr	r2, [pc, #396]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	e01c      	b.n	80014e4 <HAL_RCC_OscConfig+0x324>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x30c>
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a5e      	ldr	r2, [pc, #376]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	4a5b      	ldr	r2, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0x324>
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a57      	ldr	r2, [pc, #348]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	4b55      	ldr	r3, [pc, #340]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a54      	ldr	r2, [pc, #336]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80014de:	f023 0304 	bic.w	r3, r3, #4
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d015      	beq.n	8001518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fb4e 	bl	8000b8c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff fb4a 	bl	8000b8c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0cb      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	4b49      	ldr	r3, [pc, #292]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0ee      	beq.n	80014f4 <HAL_RCC_OscConfig+0x334>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fb38 	bl	8000b8c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151e:	e00a      	b.n	8001536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff fb34 	bl	8000b8c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	; 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e0b5      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1ee      	bne.n	8001520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a38      	ldr	r2, [pc, #224]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a1 	beq.w	80016a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800155e:	4b34      	ldr	r3, [pc, #208]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b08      	cmp	r3, #8
 8001568:	d05c      	beq.n	8001624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d141      	bne.n	80015f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_RCC_OscConfig+0x478>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fb08 	bl	8000b8c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff fb04 	bl	8000b8c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e087      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	019b      	lsls	r3, r3, #6
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	085b      	lsrs	r3, r3, #1
 80015b6:	3b01      	subs	r3, #1
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	491b      	ldr	r1, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_RCC_OscConfig+0x478>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fadd 	bl	8000b8c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff fad9 	bl	8000b8c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e05c      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x416>
 80015f4:	e054      	b.n	80016a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_RCC_OscConfig+0x478>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fac6 	bl	8000b8c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fac2 	bl	8000b8c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e045      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_OscConfig+0x470>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x444>
 8001622:	e03d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d107      	bne.n	800163c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e038      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000
 8001638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x4ec>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d028      	beq.n	800169c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d121      	bne.n	800169c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d11a      	bne.n	800169c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800166c:	4013      	ands	r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001674:	4293      	cmp	r3, r2
 8001676:	d111      	bne.n	800169c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0cc      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d90c      	bls.n	80016ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b8      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	494d      	ldr	r1, [pc, #308]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d044      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d119      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d003      	beq.n	800176e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	2b03      	cmp	r3, #3
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e067      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 0203 	bic.w	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4934      	ldr	r1, [pc, #208]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a0:	f7ff f9f4 	bl	8000b8c <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	e00a      	b.n	80017be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff f9f0 	bl	8000b8c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e04f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 020c 	and.w	r2, r3, #12
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d1eb      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d20c      	bcs.n	80017f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e032      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001836:	f000 f821 	bl	800187c <HAL_RCC_GetSysClockFreq>
 800183a:	4602      	mov	r2, r0
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	490a      	ldr	r1, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	5ccb      	ldrb	r3, [r1, r3]
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f954 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00
 800186c:	40023800 	.word	0x40023800
 8001870:	08002970 	.word	0x08002970
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001880:	b094      	sub	sp, #80	; 0x50
 8001882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	647b      	str	r3, [r7, #68]	; 0x44
 8001888:	2300      	movs	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800188c:	2300      	movs	r3, #0
 800188e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001894:	4b79      	ldr	r3, [pc, #484]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d00d      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x40>
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	f200 80e1 	bhi.w	8001a68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x34>
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ae:	e0db      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x204>)
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018b4:	e0db      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b6:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x208>)
 80018b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ba:	e0d8      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018bc:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c6:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d063      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d2:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	099b      	lsrs	r3, r3, #6
 80018d8:	2200      	movs	r2, #0
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
 80018dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
 80018e6:	2300      	movs	r3, #0
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ee:	4622      	mov	r2, r4
 80018f0:	462b      	mov	r3, r5
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	0159      	lsls	r1, r3, #5
 80018fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001900:	0150      	lsls	r0, r2, #5
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4621      	mov	r1, r4
 8001908:	1a51      	subs	r1, r2, r1
 800190a:	6139      	str	r1, [r7, #16]
 800190c:	4629      	mov	r1, r5
 800190e:	eb63 0301 	sbc.w	r3, r3, r1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001920:	4659      	mov	r1, fp
 8001922:	018b      	lsls	r3, r1, #6
 8001924:	4651      	mov	r1, sl
 8001926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800192a:	4651      	mov	r1, sl
 800192c:	018a      	lsls	r2, r1, #6
 800192e:	4651      	mov	r1, sl
 8001930:	ebb2 0801 	subs.w	r8, r2, r1
 8001934:	4659      	mov	r1, fp
 8001936:	eb63 0901 	sbc.w	r9, r3, r1
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800194a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800194e:	4690      	mov	r8, r2
 8001950:	4699      	mov	r9, r3
 8001952:	4623      	mov	r3, r4
 8001954:	eb18 0303 	adds.w	r3, r8, r3
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	462b      	mov	r3, r5
 800195c:	eb49 0303 	adc.w	r3, r9, r3
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800196e:	4629      	mov	r1, r5
 8001970:	024b      	lsls	r3, r1, #9
 8001972:	4621      	mov	r1, r4
 8001974:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001978:	4621      	mov	r1, r4
 800197a:	024a      	lsls	r2, r1, #9
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001982:	2200      	movs	r2, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
 8001986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800198c:	f7fe fc24 	bl	80001d8 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001998:	e058      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	2200      	movs	r2, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	4611      	mov	r1, r2
 80019a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019aa:	623b      	str	r3, [r7, #32]
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019b4:	4642      	mov	r2, r8
 80019b6:	464b      	mov	r3, r9
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	0159      	lsls	r1, r3, #5
 80019c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c6:	0150      	lsls	r0, r2, #5
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4641      	mov	r1, r8
 80019ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80019d2:	4649      	mov	r1, r9
 80019d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019ec:	ebb2 040a 	subs.w	r4, r2, sl
 80019f0:	eb63 050b 	sbc.w	r5, r3, fp
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	00eb      	lsls	r3, r5, #3
 80019fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a02:	00e2      	lsls	r2, r4, #3
 8001a04:	4614      	mov	r4, r2
 8001a06:	461d      	mov	r5, r3
 8001a08:	4643      	mov	r3, r8
 8001a0a:	18e3      	adds	r3, r4, r3
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	464b      	mov	r3, r9
 8001a10:	eb45 0303 	adc.w	r3, r5, r3
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a22:	4629      	mov	r1, r5
 8001a24:	028b      	lsls	r3, r1, #10
 8001a26:	4621      	mov	r1, r4
 8001a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	028a      	lsls	r2, r1, #10
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	2200      	movs	r2, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	61fa      	str	r2, [r7, #28]
 8001a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a40:	f7fe fbca 	bl	80001d8 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	3301      	adds	r3, #1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3750      	adds	r7, #80	; 0x50
 8001a74:	46bd      	mov	sp, r7
 8001a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	007a1200 	.word	0x007a1200

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	08002980 	.word	0x08002980

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffdc 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0b5b      	lsrs	r3, r3, #13
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	08002980 	.word	0x08002980

08001af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07b      	b.n	8001bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d108      	bne.n	8001b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b12:	d009      	beq.n	8001b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
 8001b1a:	e005      	b.n	8001b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe feb4 	bl	80008b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	ea42 0103 	orr.w	r1, r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0104 	and.w	r1, r3, #4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f003 0210 	and.w	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_SPI_TransmitReceive_IT+0x20>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e075      	b.n	8001d10 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c3a:	7dbb      	ldrb	r3, [r7, #22]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d00d      	beq.n	8001c5c <HAL_SPI_TransmitReceive_IT+0x58>
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c46:	d106      	bne.n	8001c56 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <HAL_SPI_TransmitReceive_IT+0x52>
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c5a:	e054      	b.n	8001d06 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c72:	e048      	b.n	8001d06 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d003      	beq.n	8001c88 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2205      	movs	r2, #5
 8001c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	887a      	ldrh	r2, [r7, #2]
 8001c9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_SPI_TransmitReceive_IT+0x118>)
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8001cc6:	e005      	b.n	8001cd4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_SPI_TransmitReceive_IT+0x120>)
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_SPI_TransmitReceive_IT+0x124>)
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d008      	beq.n	8001d04 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e000      	b.n	8001d06 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001d04:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	08002041 	.word	0x08002041
 8001d20:	080020a1 	.word	0x080020a1
 8001d24:	08001f7d 	.word	0x08001f7d
 8001d28:	08001fe1 	.word	0x08001fe1

08001d2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10f      	bne.n	8001d70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
    return;
 8001d6e:	e0d7      	b.n	8001f20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_SPI_IRQHandler+0x66>
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	09db      	lsrs	r3, r3, #7
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
    return;
 8001d90:	e0c6      	b.n	8001f20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_SPI_IRQHandler+0x8c>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80b4 	beq.w	8001f20 <HAL_SPI_IRQHandler+0x1f4>
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80ad 	beq.w	8001f20 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d023      	beq.n	8001e1a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d011      	beq.n	8001e02 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f043 0204 	orr.w	r2, r3, #4
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	e00b      	b.n	8001e1a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
        return;
 8001e18:	e082      	b.n	8001f20 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d014      	beq.n	8001e50 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00c      	beq.n	8001e76 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f043 0208 	orr.w	r2, r3, #8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d04f      	beq.n	8001f1e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e8c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <HAL_SPI_IRQHandler+0x17e>
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d034      	beq.n	8001f14 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0203 	bic.w	r2, r2, #3
 8001eb8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d011      	beq.n	8001ee6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <HAL_SPI_IRQHandler+0x1fc>)
 8001ec8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe ff9d 	bl	8000e0e <HAL_DMA_Abort_IT>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d016      	beq.n	8001f1c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <HAL_SPI_IRQHandler+0x1fc>)
 8001ef4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ff87 	bl	8000e0e <HAL_DMA_Abort_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001f12:	e003      	b.n	8001f1c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f813 	bl	8001f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f1a:	e000      	b.n	8001f1e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8001f1c:	bf00      	nop
    return;
 8001f1e:	bf00      	nop
  }
}
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08001f55 	.word	0x08001f55

08001f2c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff ffe6 	bl	8001f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f103 020c 	add.w	r2, r3, #12
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fc6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f95e 	bl	8002294 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10f      	bne.n	8002038 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002026:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f92e 	bl	8002294 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	b292      	uxth	r2, r2
 8002054:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	1c9a      	adds	r2, r3, #2
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10f      	bne.n	8002098 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002086:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8fe 	bl	8002294 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	1c9a      	adds	r2, r3, #2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8cf 	bl	8002294 <SPI_CloseRxTx_ISR>
    }
  }
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002110:	f7fe fd3c 	bl	8000b8c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002120:	f7fe fd34 	bl	8000b8c <HAL_GetTick>
 8002124:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	0d1b      	lsrs	r3, r3, #20
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002136:	e054      	b.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d050      	beq.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002140:	f7fe fd24 	bl	8000b8c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	429a      	cmp	r2, r3
 800214e:	d902      	bls.n	8002156 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d13d      	bne.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002164:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800216e:	d111      	bne.n	8002194 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002178:	d004      	beq.n	8002184 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002182:	d107      	bne.n	8002194 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219c:	d10f      	bne.n	80021be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e017      	b.n	8002202 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3b01      	subs	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4013      	ands	r3, r2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d19b      	bne.n	8002138 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000000 	.word	0x20000000

08002210 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <SPI_EndRxTxTransaction+0x7c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <SPI_EndRxTxTransaction+0x80>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0d5b      	lsrs	r3, r3, #21
 8002228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800223a:	d112      	bne.n	8002262 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2200      	movs	r2, #0
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff ff5a 	bl	8002100 <SPI_WaitFlagStateUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d016      	beq.n	8002280 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f043 0220 	orr.w	r2, r3, #32
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e00f      	b.n	8002282 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3b01      	subs	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d0f2      	beq.n	8002262 <SPI_EndRxTxTransaction+0x52>
 800227c:	e000      	b.n	8002280 <SPI_EndRxTxTransaction+0x70>
        break;
 800227e:	bf00      	nop
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000
 8002290:	165e9f81 	.word	0x165e9f81

08002294 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <SPI_CloseRxTx_ISR+0xe0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a35      	ldr	r2, [pc, #212]	; (8002378 <SPI_CloseRxTx_ISR+0xe4>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	2264      	movs	r2, #100	; 0x64
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022b0:	f7fe fc6c 	bl	8000b8c <HAL_GetTick>
 80022b4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0220 	bic.w	r2, r2, #32
 80022c4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80022d8:	e009      	b.n	80022ee <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3b01      	subs	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0eb      	beq.n	80022c6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	2164      	movs	r1, #100	; 0x64
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ff8c 	bl	8002210 <SPI_EndRxTxTransaction>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	2b00      	cmp	r3, #0
 800232e:	d115      	bne.n	800235c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b04      	cmp	r3, #4
 800233a:	d107      	bne.n	800234c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fdf1 	bl	8001f2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800234a:	e00e      	b.n	800236a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe fa6d 	bl	8000834 <HAL_SPI_TxRxCpltCallback>
}
 800235a:	e006      	b.n	800236a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fdeb 	bl	8001f40 <HAL_SPI_ErrorCallback>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000
 8002378:	057619f1 	.word	0x057619f1

0800237c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e03f      	b.n	800240e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fad4 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f829 	bl	8002418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b0c0      	sub	sp, #256	; 0x100
 800241e:	af00      	add	r7, sp, #0
 8002420:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002434:	68d9      	ldr	r1, [r3, #12]
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	ea40 0301 	orr.w	r3, r0, r1
 8002440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	431a      	orrs	r2, r3
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	431a      	orrs	r2, r3
 8002458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002470:	f021 010c 	bic.w	r1, r1, #12
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800247e:	430b      	orrs	r3, r1
 8002480:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800248e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002492:	6999      	ldr	r1, [r3, #24]
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	ea40 0301 	orr.w	r3, r0, r1
 800249e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <UART_SetConfig+0x2cc>)
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d005      	beq.n	80024b8 <UART_SetConfig+0xa0>
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <UART_SetConfig+0x2d0>)
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d104      	bne.n	80024c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024b8:	f7ff fb06 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 80024bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024c0:	e003      	b.n	80024ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024c2:	f7ff faed 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80024c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d4:	f040 810c 	bne.w	80026f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024dc:	2200      	movs	r2, #0
 80024de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024ea:	4622      	mov	r2, r4
 80024ec:	462b      	mov	r3, r5
 80024ee:	1891      	adds	r1, r2, r2
 80024f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80024f2:	415b      	adcs	r3, r3
 80024f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024fa:	4621      	mov	r1, r4
 80024fc:	eb12 0801 	adds.w	r8, r2, r1
 8002500:	4629      	mov	r1, r5
 8002502:	eb43 0901 	adc.w	r9, r3, r1
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800251a:	4690      	mov	r8, r2
 800251c:	4699      	mov	r9, r3
 800251e:	4623      	mov	r3, r4
 8002520:	eb18 0303 	adds.w	r3, r8, r3
 8002524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002528:	462b      	mov	r3, r5
 800252a:	eb49 0303 	adc.w	r3, r9, r3
 800252e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800253e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002542:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002546:	460b      	mov	r3, r1
 8002548:	18db      	adds	r3, r3, r3
 800254a:	653b      	str	r3, [r7, #80]	; 0x50
 800254c:	4613      	mov	r3, r2
 800254e:	eb42 0303 	adc.w	r3, r2, r3
 8002552:	657b      	str	r3, [r7, #84]	; 0x54
 8002554:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002558:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800255c:	f7fd fe3c 	bl	80001d8 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <UART_SetConfig+0x2d4>)
 8002566:	fba3 2302 	umull	r2, r3, r3, r2
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	011c      	lsls	r4, r3, #4
 800256e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002578:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800257c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002580:	4642      	mov	r2, r8
 8002582:	464b      	mov	r3, r9
 8002584:	1891      	adds	r1, r2, r2
 8002586:	64b9      	str	r1, [r7, #72]	; 0x48
 8002588:	415b      	adcs	r3, r3
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800258c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002590:	4641      	mov	r1, r8
 8002592:	eb12 0a01 	adds.w	sl, r2, r1
 8002596:	4649      	mov	r1, r9
 8002598:	eb43 0b01 	adc.w	fp, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025b0:	4692      	mov	sl, r2
 80025b2:	469b      	mov	fp, r3
 80025b4:	4643      	mov	r3, r8
 80025b6:	eb1a 0303 	adds.w	r3, sl, r3
 80025ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025be:	464b      	mov	r3, r9
 80025c0:	eb4b 0303 	adc.w	r3, fp, r3
 80025c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025dc:	460b      	mov	r3, r1
 80025de:	18db      	adds	r3, r3, r3
 80025e0:	643b      	str	r3, [r7, #64]	; 0x40
 80025e2:	4613      	mov	r3, r2
 80025e4:	eb42 0303 	adc.w	r3, r2, r3
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025f2:	f7fd fdf1 	bl	80001d8 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <UART_SetConfig+0x2d4>)
 80025fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2264      	movs	r2, #100	; 0x64
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	1acb      	subs	r3, r1, r3
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <UART_SetConfig+0x2d4>)
 8002614:	fba3 2302 	umull	r2, r3, r3, r2
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002620:	441c      	add	r4, r3
 8002622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002626:	2200      	movs	r2, #0
 8002628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800262c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002630:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002634:	4642      	mov	r2, r8
 8002636:	464b      	mov	r3, r9
 8002638:	1891      	adds	r1, r2, r2
 800263a:	63b9      	str	r1, [r7, #56]	; 0x38
 800263c:	415b      	adcs	r3, r3
 800263e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002644:	4641      	mov	r1, r8
 8002646:	1851      	adds	r1, r2, r1
 8002648:	6339      	str	r1, [r7, #48]	; 0x30
 800264a:	4649      	mov	r1, r9
 800264c:	414b      	adcs	r3, r1
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800265c:	4659      	mov	r1, fp
 800265e:	00cb      	lsls	r3, r1, #3
 8002660:	4651      	mov	r1, sl
 8002662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002666:	4651      	mov	r1, sl
 8002668:	00ca      	lsls	r2, r1, #3
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	4603      	mov	r3, r0
 8002670:	4642      	mov	r2, r8
 8002672:	189b      	adds	r3, r3, r2
 8002674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002678:	464b      	mov	r3, r9
 800267a:	460a      	mov	r2, r1
 800267c:	eb42 0303 	adc.w	r3, r2, r3
 8002680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002690:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002694:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002698:	460b      	mov	r3, r1
 800269a:	18db      	adds	r3, r3, r3
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
 800269e:	4613      	mov	r3, r2
 80026a0:	eb42 0303 	adc.w	r3, r2, r3
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026ae:	f7fd fd93 	bl	80001d8 <__aeabi_uldivmod>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <UART_SetConfig+0x2d4>)
 80026b8:	fba3 1302 	umull	r1, r3, r3, r2
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	2164      	movs	r1, #100	; 0x64
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	3332      	adds	r3, #50	; 0x32
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <UART_SetConfig+0x2d4>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	f003 0207 	and.w	r2, r3, #7
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4422      	add	r2, r4
 80026de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026e0:	e105      	b.n	80028ee <UART_SetConfig+0x4d6>
 80026e2:	bf00      	nop
 80026e4:	40011000 	.word	0x40011000
 80026e8:	40011400 	.word	0x40011400
 80026ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002702:	4642      	mov	r2, r8
 8002704:	464b      	mov	r3, r9
 8002706:	1891      	adds	r1, r2, r2
 8002708:	6239      	str	r1, [r7, #32]
 800270a:	415b      	adcs	r3, r3
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002712:	4641      	mov	r1, r8
 8002714:	1854      	adds	r4, r2, r1
 8002716:	4649      	mov	r1, r9
 8002718:	eb43 0501 	adc.w	r5, r3, r1
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	00eb      	lsls	r3, r5, #3
 8002726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272a:	00e2      	lsls	r2, r4, #3
 800272c:	4614      	mov	r4, r2
 800272e:	461d      	mov	r5, r3
 8002730:	4643      	mov	r3, r8
 8002732:	18e3      	adds	r3, r4, r3
 8002734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002738:	464b      	mov	r3, r9
 800273a:	eb45 0303 	adc.w	r3, r5, r3
 800273e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800274e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800275e:	4629      	mov	r1, r5
 8002760:	008b      	lsls	r3, r1, #2
 8002762:	4621      	mov	r1, r4
 8002764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002768:	4621      	mov	r1, r4
 800276a:	008a      	lsls	r2, r1, #2
 800276c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002770:	f7fd fd32 	bl	80001d8 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4b60      	ldr	r3, [pc, #384]	; (80028fc <UART_SetConfig+0x4e4>)
 800277a:	fba3 2302 	umull	r2, r3, r3, r2
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	011c      	lsls	r4, r3, #4
 8002782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800278c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002790:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002794:	4642      	mov	r2, r8
 8002796:	464b      	mov	r3, r9
 8002798:	1891      	adds	r1, r2, r2
 800279a:	61b9      	str	r1, [r7, #24]
 800279c:	415b      	adcs	r3, r3
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a4:	4641      	mov	r1, r8
 80027a6:	1851      	adds	r1, r2, r1
 80027a8:	6139      	str	r1, [r7, #16]
 80027aa:	4649      	mov	r1, r9
 80027ac:	414b      	adcs	r3, r1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027bc:	4659      	mov	r1, fp
 80027be:	00cb      	lsls	r3, r1, #3
 80027c0:	4651      	mov	r1, sl
 80027c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027c6:	4651      	mov	r1, sl
 80027c8:	00ca      	lsls	r2, r1, #3
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	4642      	mov	r2, r8
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027d8:	464b      	mov	r3, r9
 80027da:	460a      	mov	r2, r1
 80027dc:	eb42 0303 	adc.w	r3, r2, r3
 80027e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80027ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027fc:	4649      	mov	r1, r9
 80027fe:	008b      	lsls	r3, r1, #2
 8002800:	4641      	mov	r1, r8
 8002802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002806:	4641      	mov	r1, r8
 8002808:	008a      	lsls	r2, r1, #2
 800280a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800280e:	f7fd fce3 	bl	80001d8 <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <UART_SetConfig+0x4e4>)
 8002818:	fba3 1302 	umull	r1, r3, r3, r2
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	2164      	movs	r1, #100	; 0x64
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	3332      	adds	r3, #50	; 0x32
 800282a:	4a34      	ldr	r2, [pc, #208]	; (80028fc <UART_SetConfig+0x4e4>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002836:	441c      	add	r4, r3
 8002838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800283c:	2200      	movs	r2, #0
 800283e:	673b      	str	r3, [r7, #112]	; 0x70
 8002840:	677a      	str	r2, [r7, #116]	; 0x74
 8002842:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002846:	4642      	mov	r2, r8
 8002848:	464b      	mov	r3, r9
 800284a:	1891      	adds	r1, r2, r2
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	415b      	adcs	r3, r3
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002856:	4641      	mov	r1, r8
 8002858:	1851      	adds	r1, r2, r1
 800285a:	6039      	str	r1, [r7, #0]
 800285c:	4649      	mov	r1, r9
 800285e:	414b      	adcs	r3, r1
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800286e:	4659      	mov	r1, fp
 8002870:	00cb      	lsls	r3, r1, #3
 8002872:	4651      	mov	r1, sl
 8002874:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002878:	4651      	mov	r1, sl
 800287a:	00ca      	lsls	r2, r1, #3
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	4603      	mov	r3, r0
 8002882:	4642      	mov	r2, r8
 8002884:	189b      	adds	r3, r3, r2
 8002886:	66bb      	str	r3, [r7, #104]	; 0x68
 8002888:	464b      	mov	r3, r9
 800288a:	460a      	mov	r2, r1
 800288c:	eb42 0303 	adc.w	r3, r2, r3
 8002890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	663b      	str	r3, [r7, #96]	; 0x60
 800289c:	667a      	str	r2, [r7, #100]	; 0x64
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028aa:	4649      	mov	r1, r9
 80028ac:	008b      	lsls	r3, r1, #2
 80028ae:	4641      	mov	r1, r8
 80028b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028b4:	4641      	mov	r1, r8
 80028b6:	008a      	lsls	r2, r1, #2
 80028b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028bc:	f7fd fc8c 	bl	80001d8 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <UART_SetConfig+0x4e4>)
 80028c6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2164      	movs	r1, #100	; 0x64
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	; 0x32
 80028d8:	4a08      	ldr	r2, [pc, #32]	; (80028fc <UART_SetConfig+0x4e4>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4422      	add	r2, r4
 80028ec:	609a      	str	r2, [r3, #8]
}
 80028ee:	bf00      	nop
 80028f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028f4:	46bd      	mov	sp, r7
 80028f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028fa:	bf00      	nop
 80028fc:	51eb851f 	.word	0x51eb851f

08002900 <__libc_init_array>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	4d0d      	ldr	r5, [pc, #52]	; (8002938 <__libc_init_array+0x38>)
 8002904:	4c0d      	ldr	r4, [pc, #52]	; (800293c <__libc_init_array+0x3c>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	2600      	movs	r6, #0
 800290c:	42a6      	cmp	r6, r4
 800290e:	d109      	bne.n	8002924 <__libc_init_array+0x24>
 8002910:	4d0b      	ldr	r5, [pc, #44]	; (8002940 <__libc_init_array+0x40>)
 8002912:	4c0c      	ldr	r4, [pc, #48]	; (8002944 <__libc_init_array+0x44>)
 8002914:	f000 f820 	bl	8002958 <_init>
 8002918:	1b64      	subs	r4, r4, r5
 800291a:	10a4      	asrs	r4, r4, #2
 800291c:	2600      	movs	r6, #0
 800291e:	42a6      	cmp	r6, r4
 8002920:	d105      	bne.n	800292e <__libc_init_array+0x2e>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	f855 3b04 	ldr.w	r3, [r5], #4
 8002928:	4798      	blx	r3
 800292a:	3601      	adds	r6, #1
 800292c:	e7ee      	b.n	800290c <__libc_init_array+0xc>
 800292e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002932:	4798      	blx	r3
 8002934:	3601      	adds	r6, #1
 8002936:	e7f2      	b.n	800291e <__libc_init_array+0x1e>
 8002938:	08002990 	.word	0x08002990
 800293c:	08002990 	.word	0x08002990
 8002940:	08002990 	.word	0x08002990
 8002944:	08002994 	.word	0x08002994

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
