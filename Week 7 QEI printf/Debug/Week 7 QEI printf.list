
Week 7 QEI printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e20  08003e20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e28  08003e28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003ea0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003ea0  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cba2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa5  00000000  00000000  0002cc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d5d  00000000  00000000  0002fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d290  00000000  00000000  00046bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f364  00000000  00000000  00053e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e31f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c2c  00000000  00000000  000e3244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d48 	.word	0x08003d48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003d48 	.word	0x08003d48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d013      	beq.n	8000da0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00b      	beq.n	8000da0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d88:	e000      	b.n	8000d8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f9      	beq.n	8000d8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000db4:	f000 fb70 	bl	8001498 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000db8:	f000 f852 	bl	8000e60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dbc:	f000 f938 	bl	8001030 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000dc0:	f000 f90c 	bl	8000fdc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000dc4:	f000 f8b6 	bl	8000f34 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000dc8:	2104      	movs	r1, #4
 8000dca:	481e      	ldr	r0, [pc, #120]	; (8000e44 <main+0x94>)
 8000dcc:	f001 fb98 	bl	8002500 <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <main+0x94>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <main+0x98>)
 8000dd8:	6013      	str	r3, [r2, #0]
		degrees = QEIReadRaw * 360.0 / 3072.0;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <main+0x98>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb90 	bl	8000504 <__aeabi_ui2d>
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <main+0x9c>)
 8000dea:	f7ff fc05 	bl	80005f8 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <main+0xa0>)
 8000dfc:	f7ff fd26 	bl	800084c <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fe08 	bl	8000a1c <__aeabi_d2uiz>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <main+0xa4>)
 8000e10:	6013      	str	r3, [r2, #0]

		static uint32_t timestamp = 0;
		if(HAL_GetTick() > timestamp){
 8000e12:	f000 fba7 	bl	8001564 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <main+0xa8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d9d7      	bls.n	8000dd0 <main+0x20>
			timestamp = HAL_GetTick() + 100;
 8000e20:	f000 fba0 	bl	8001564 <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	3364      	adds	r3, #100	; 0x64
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <main+0xa8>)
 8000e2a:	6013      	str	r3, [r2, #0]
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <main+0x94>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <main+0x98>)
 8000e34:	6013      	str	r3, [r2, #0]
			printf("Position = %d\n", QEIReadRaw);
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <main+0x98>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <main+0xac>)
 8000e3e:	f001 fff5 	bl	8002e2c <iprintf>
	while (1) {
 8000e42:	e7c5      	b.n	8000dd0 <main+0x20>
 8000e44:	2000008c 	.word	0x2000008c
 8000e48:	20000118 	.word	0x20000118
 8000e4c:	40768000 	.word	0x40768000
 8000e50:	40a80000 	.word	0x40a80000
 8000e54:	2000011c 	.word	0x2000011c
 8000e58:	20000120 	.word	0x20000120
 8000e5c:	08003d60 	.word	0x08003d60

08000e60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	; 0x50
 8000e64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	; 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 ffd4 	bl	8002e1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <SystemClock_Config+0xcc>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <SystemClock_Config+0xcc>)
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <SystemClock_Config+0xcc>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <SystemClock_Config+0xd0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <SystemClock_Config+0xd0>)
 8000eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <SystemClock_Config+0xd0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000ed4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eda:	2304      	movs	r3, #4
 8000edc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fdcc 	bl	8001a84 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x96>
		Error_Handler();
 8000ef2:	f000 f927 	bl	8001144 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2302      	movs	r3, #2
 8000efc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f82e 	bl	8001f74 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xc2>
		Error_Handler();
 8000f1e:	f000 f911 	bl	8001144 <Error_Handler>
	}
}
 8000f22:	bf00      	nop
 8000f24:	3750      	adds	r7, #80	; 0x50
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2224      	movs	r2, #36	; 0x24
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 ff6a 	bl	8002e1c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f56:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3071;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000f66:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000f6a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f90:	2301      	movs	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000fa4:	f001 fa06 	bl	80023b4 <HAL_TIM_Encoder_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8000fae:	f000 f8c9 	bl	8001144 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_TIM2_Init+0xa4>)
 8000fc0:	f001 fbd2 	bl	8002768 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000fca:	f000 f8bb 	bl	8001144 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000008c 	.word	0x2000008c

08000fdc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_USART2_UART_Init+0x50>)
 8000fe4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001014:	f001 fc16 	bl	8002844 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800101e:	f000 f891 	bl	8001144 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000d4 	.word	0x200000d4
 800102c:	40004400 	.word	0x40004400

08001030 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <MX_GPIO_Init+0xd0>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a25      	ldr	r2, [pc, #148]	; (8001100 <MX_GPIO_Init+0xd0>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <MX_GPIO_Init+0xd0>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_GPIO_Init+0xd0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <MX_GPIO_Init+0xd0>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_GPIO_Init+0xd0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	4812      	ldr	r0, [pc, #72]	; (8001104 <MX_GPIO_Init+0xd4>)
 80010bc:	f000 fcc8 	bl	8001a50 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_GPIO_Init+0xd8>)
 80010d8:	f000 fb36 	bl	8001748 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80010dc:	2320      	movs	r3, #32
 80010de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_GPIO_Init+0xd4>)
 80010f4:	f000 fb28 	bl	8001748 <HAL_GPIO_Init>

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020800 	.word	0x40020800

0800110c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < len; i++) {
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e009      	b.n	8001132 <_write+0x26>
		ITM_SendChar(*ptr++);
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	60ba      	str	r2, [r7, #8]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe1a 	bl	8000d60 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3301      	adds	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbf1      	blt.n	800111e <_write+0x12>
	}
	return len;
 800113a:	687b      	ldr	r3, [r7, #4]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_MspInit+0x4c>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_MspInit+0x4c>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800118e:	2007      	movs	r0, #7
 8001190:	f000 faa6 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d12b      	bne.n	800121a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_TIM_Encoder_MspInit+0x84>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_TIM_Encoder_MspInit+0x84>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_TIM_Encoder_MspInit+0x84>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_TIM_Encoder_MspInit+0x84>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_TIM_Encoder_MspInit+0x84>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_TIM_Encoder_MspInit+0x84>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fa:	2303      	movs	r3, #3
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120a:	2301      	movs	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <HAL_TIM_Encoder_MspInit+0x88>)
 8001216:	f000 fa97 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_UART_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_UART_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001296:	2307      	movs	r3, #7
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 80012a2:	f000 fa51 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f918 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	e00a      	b.n	8001338 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001322:	f3af 8000 	nop.w
 8001326:	4601      	mov	r1, r0
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf0      	blt.n	8001322 <_read+0x12>
  }

  return len;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_close>:
  }
  return len;
}

int _close(int file)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001372:	605a      	str	r2, [r3, #4]
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_isatty>:

int _isatty(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f001 fcf0 	bl	8002dc8 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20020000 	.word	0x20020000
 8001414:	00000400 	.word	0x00000400
 8001418:	20000124 	.word	0x20000124
 800141c:	20000140 	.word	0x20000140

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800144a:	490e      	ldr	r1, [pc, #56]	; (8001484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001460:	4c0b      	ldr	r4, [pc, #44]	; (8001490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146e:	f7ff ffd7 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f001 fcaf 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fc9b 	bl	8000db0 <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800147c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001488:	08003e30 	.word	0x08003e30
  ldr r2, =_sbss
 800148c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001490:	2000013c 	.word	0x2000013c

08001494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_Init+0x40>)
 80014a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_Init+0x40>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_Init+0x40>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f90d 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fe40 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f917 	bl	800172e <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f8ed 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	20000008 	.word	0x20000008
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	20000128 	.word	0x20000128

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000128 	.word	0x20000128

0800157c <__NVIC_SetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_SetPriority>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff47 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff5c 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb0 	bl	800169c <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e159      	b.n	8001a18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8148 	bne.w	8001a12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d005      	beq.n	800179a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	2b02      	cmp	r3, #2
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b03      	cmp	r3, #3
 8001806:	d017      	beq.n	8001838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a2 	beq.w	8001a12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_GPIO_Init+0x2e8>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a56      	ldr	r2, [pc, #344]	; (8001a30 <HAL_GPIO_Init+0x2e8>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <HAL_GPIO_Init+0x2e8>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ea:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_GPIO_Init+0x2ec>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a49      	ldr	r2, [pc, #292]	; (8001a38 <HAL_GPIO_Init+0x2f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x202>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a48      	ldr	r2, [pc, #288]	; (8001a3c <HAL_GPIO_Init+0x2f4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x1fe>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <HAL_GPIO_Init+0x2f8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x1fa>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <HAL_GPIO_Init+0x2fc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x1f6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <HAL_GPIO_Init+0x300>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x1f2>
 8001936:	2304      	movs	r3, #4
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x204>
 800193a:	2307      	movs	r3, #7
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x204>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x204>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x204>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x204>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	; (8001a34 <HAL_GPIO_Init+0x2ec>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196a:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_GPIO_Init+0x304>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198e:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <HAL_GPIO_Init+0x304>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_GPIO_Init+0x304>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b8:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <HAL_GPIO_Init+0x304>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_GPIO_Init+0x304>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e2:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <HAL_GPIO_Init+0x304>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_GPIO_Init+0x304>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_GPIO_Init+0x304>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f aea2 	bls.w	8001764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e267      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d075      	beq.n	8001b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d00c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d112      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x108>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d157      	bne.n	8001b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e242      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x74>
 8001aea:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a75      	ldr	r2, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6f      	ldr	r2, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b6d      	ldr	r3, [pc, #436]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6c      	ldr	r2, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a68      	ldr	r2, [pc, #416]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fd12 	bl	8001564 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fd0e 	bl	8001564 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e207      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xc0>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fcfe 	bl	8001564 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fcfa 	bl	8001564 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1f3      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b51      	ldr	r3, [pc, #324]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0xe8>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x152>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1c7      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4937      	ldr	r1, [pc, #220]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_OscConfig+0x244>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fcb3 	bl	8001564 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fcaf 	bl	8001564 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1a8      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4925      	ldr	r1, [pc, #148]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x244>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc92 	bl	8001564 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff fc8e 	bl	8001564 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e187      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d036      	beq.n	8001cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d016      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x248>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fc72 	bl	8001564 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fc6e 	bl	8001564 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e167      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_OscConfig+0x240>)
 8001c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x200>
 8001ca2:	e01b      	b.n	8001cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x248>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fc5b 	bl	8001564 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	e00e      	b.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fc57 	bl	8001564 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d907      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e150      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	42470000 	.word	0x42470000
 8001ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ea      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8097 	beq.w	8001e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10f      	bne.n	8001d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a7c      	ldr	r2, [pc, #496]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	4b77      	ldr	r3, [pc, #476]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d26:	4b74      	ldr	r3, [pc, #464]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a73      	ldr	r2, [pc, #460]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fc17 	bl	8001564 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7ff fc13 	bl	8001564 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e10c      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x474>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2ea>
 8001d60:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x324>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x30c>
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a5e      	ldr	r2, [pc, #376]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a5b      	ldr	r2, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0x324>
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a54      	ldr	r2, [pc, #336]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f023 0304 	bic.w	r3, r3, #4
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d015      	beq.n	8001ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff fbd8 	bl	8001564 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff fbd4 	bl	8001564 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0cb      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ee      	beq.n	8001db8 <HAL_RCC_OscConfig+0x334>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fbc2 	bl	8001564 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff fbbe 	bl	8001564 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0b5      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ee      	bne.n	8001de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a38      	ldr	r2, [pc, #224]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a1 	beq.w	8001f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d05c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d141      	bne.n	8001eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCC_OscConfig+0x478>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fb92 	bl	8001564 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fb8e 	bl	8001564 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e087      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	491b      	ldr	r1, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x478>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fb67 	bl	8001564 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff fb63 	bl	8001564 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e05c      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x416>
 8001eb8:	e054      	b.n	8001f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCC_OscConfig+0x478>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fb50 	bl	8001564 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff fb4c 	bl	8001564 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e045      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x470>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x444>
 8001ee6:	e03d      	b.n	8001f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e038      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x4ec>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d028      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d121      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d11a      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f30:	4013      	ands	r3, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d111      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0cc      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b68      	ldr	r3, [pc, #416]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d90c      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b65      	ldr	r3, [pc, #404]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d044      	beq.n	8002094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d119      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d003      	beq.n	8002032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202e:	2b03      	cmp	r3, #3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e067      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4934      	ldr	r1, [pc, #208]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7ff fa7e 	bl	8001564 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7ff fa7a 	bl	8001564 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e04f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d20c      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e032      	b.n	8002122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f821 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f9de 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00
 8002130:	40023800 	.word	0x40023800
 8002134:	08003d70 	.word	0x08003d70
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002144:	b094      	sub	sp, #80	; 0x50
 8002146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
 800214c:	2300      	movs	r3, #0
 800214e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002150:	2300      	movs	r3, #0
 8002152:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d00d      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x40>
 8002164:	2b08      	cmp	r3, #8
 8002166:	f200 80e1 	bhi.w	800232c <HAL_RCC_GetSysClockFreq+0x1ec>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x34>
 800216e:	2b04      	cmp	r3, #4
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x3a>
 8002172:	e0db      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002174:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_GetSysClockFreq+0x204>)
 8002176:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002178:	e0db      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800217a:	4b73      	ldr	r3, [pc, #460]	; (8002348 <HAL_RCC_GetSysClockFreq+0x208>)
 800217c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800217e:	e0d8      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002188:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800218a:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002196:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	099b      	lsrs	r3, r3, #6
 800219c:	2200      	movs	r2, #0
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
 80021ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021b2:	4622      	mov	r2, r4
 80021b4:	462b      	mov	r3, r5
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	0159      	lsls	r1, r3, #5
 80021c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c4:	0150      	lsls	r0, r2, #5
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4621      	mov	r1, r4
 80021cc:	1a51      	subs	r1, r2, r1
 80021ce:	6139      	str	r1, [r7, #16]
 80021d0:	4629      	mov	r1, r5
 80021d2:	eb63 0301 	sbc.w	r3, r3, r1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021e4:	4659      	mov	r1, fp
 80021e6:	018b      	lsls	r3, r1, #6
 80021e8:	4651      	mov	r1, sl
 80021ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ee:	4651      	mov	r1, sl
 80021f0:	018a      	lsls	r2, r1, #6
 80021f2:	4651      	mov	r1, sl
 80021f4:	ebb2 0801 	subs.w	r8, r2, r1
 80021f8:	4659      	mov	r1, fp
 80021fa:	eb63 0901 	sbc.w	r9, r3, r1
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800220a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800220e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002212:	4690      	mov	r8, r2
 8002214:	4699      	mov	r9, r3
 8002216:	4623      	mov	r3, r4
 8002218:	eb18 0303 	adds.w	r3, r8, r3
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	462b      	mov	r3, r5
 8002220:	eb49 0303 	adc.w	r3, r9, r3
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002232:	4629      	mov	r1, r5
 8002234:	024b      	lsls	r3, r1, #9
 8002236:	4621      	mov	r1, r4
 8002238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800223c:	4621      	mov	r1, r4
 800223e:	024a      	lsls	r2, r1, #9
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002246:	2200      	movs	r2, #0
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
 800224a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800224c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002250:	f7fe fc04 	bl	8000a5c <__aeabi_uldivmod>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4613      	mov	r3, r2
 800225a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800225c:	e058      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	2200      	movs	r2, #0
 8002266:	4618      	mov	r0, r3
 8002268:	4611      	mov	r1, r2
 800226a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002278:	4642      	mov	r2, r8
 800227a:	464b      	mov	r3, r9
 800227c:	f04f 0000 	mov.w	r0, #0
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	0159      	lsls	r1, r3, #5
 8002286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228a:	0150      	lsls	r0, r2, #5
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4641      	mov	r1, r8
 8002292:	ebb2 0a01 	subs.w	sl, r2, r1
 8002296:	4649      	mov	r1, r9
 8002298:	eb63 0b01 	sbc.w	fp, r3, r1
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022b0:	ebb2 040a 	subs.w	r4, r2, sl
 80022b4:	eb63 050b 	sbc.w	r5, r3, fp
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	00eb      	lsls	r3, r5, #3
 80022c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c6:	00e2      	lsls	r2, r4, #3
 80022c8:	4614      	mov	r4, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	4643      	mov	r3, r8
 80022ce:	18e3      	adds	r3, r4, r3
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	464b      	mov	r3, r9
 80022d4:	eb45 0303 	adc.w	r3, r5, r3
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e6:	4629      	mov	r1, r5
 80022e8:	028b      	lsls	r3, r1, #10
 80022ea:	4621      	mov	r1, r4
 80022ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f0:	4621      	mov	r1, r4
 80022f2:	028a      	lsls	r2, r1, #10
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fa:	2200      	movs	r2, #0
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	61fa      	str	r2, [r7, #28]
 8002300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002304:	f7fe fbaa 	bl	8000a5c <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetSysClockFreq+0x200>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0x204>)
 800232e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002334:	4618      	mov	r0, r3
 8002336:	3750      	adds	r7, #80	; 0x50
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0a9b      	lsrs	r3, r3, #10
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	08003d80 	.word	0x08003d80

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffdc 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0b5b      	lsrs	r3, r3, #13
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08003d80 	.word	0x08003d80

080023b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e097      	b.n	80024f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe fedf 	bl	80011a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f8:	f023 0307 	bic.w	r3, r3, #7
 80023fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f000 f907 	bl	800261c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	4313      	orrs	r3, r2
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002454:	f023 030c 	bic.w	r3, r3, #12
 8002458:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	4313      	orrs	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	011a      	lsls	r2, r3, #4
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	031b      	lsls	r3, r3, #12
 8002484:	4313      	orrs	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002492:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800249a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4313      	orrs	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002510:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002518:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002520:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002528:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d110      	bne.n	8002552 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002536:	7b7b      	ldrb	r3, [r7, #13]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d001      	beq.n	8002540 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e069      	b.n	8002614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002550:	e031      	b.n	80025b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d110      	bne.n	800257a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002558:	7bbb      	ldrb	r3, [r7, #14]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800255e:	7b3b      	ldrb	r3, [r7, #12]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d001      	beq.n	8002568 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e055      	b.n	8002614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002578:	e01d      	b.n	80025b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d108      	bne.n	8002592 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002586:	7b7b      	ldrb	r3, [r7, #13]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800258c:	7b3b      	ldrb	r3, [r7, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e03e      	b.n	8002614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_TIM_Encoder_Start+0xc4>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d008      	beq.n	80025d4 <HAL_TIM_Encoder_Start+0xd4>
 80025c2:	e00f      	b.n	80025e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f8a5 	bl	800271c <TIM_CCxChannelCmd>
      break;
 80025d2:	e016      	b.n	8002602 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	2104      	movs	r1, #4
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f89d 	bl	800271c <TIM_CCxChannelCmd>
      break;
 80025e2:	e00e      	b.n	8002602 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f895 	bl	800271c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	2104      	movs	r1, #4
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f88e 	bl	800271c <TIM_CCxChannelCmd>
      break;
 8002600:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a34      	ldr	r2, [pc, #208]	; (8002700 <TIM_Base_SetConfig+0xe4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00f      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263a:	d00b      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a31      	ldr	r2, [pc, #196]	; (8002704 <TIM_Base_SetConfig+0xe8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a30      	ldr	r2, [pc, #192]	; (8002708 <TIM_Base_SetConfig+0xec>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a2f      	ldr	r2, [pc, #188]	; (800270c <TIM_Base_SetConfig+0xf0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a25      	ldr	r2, [pc, #148]	; (8002700 <TIM_Base_SetConfig+0xe4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01b      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d017      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <TIM_Base_SetConfig+0xe8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a21      	ldr	r2, [pc, #132]	; (8002708 <TIM_Base_SetConfig+0xec>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00f      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <TIM_Base_SetConfig+0xf0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00b      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <TIM_Base_SetConfig+0xf4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <TIM_Base_SetConfig+0xf8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d003      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <TIM_Base_SetConfig+0xfc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d108      	bne.n	80026b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <TIM_Base_SetConfig+0xe4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d103      	bne.n	80026ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	615a      	str	r2, [r3, #20]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40010000 	.word	0x40010000
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800
 800270c:	40000c00 	.word	0x40000c00
 8002710:	40014000 	.word	0x40014000
 8002714:	40014400 	.word	0x40014400
 8002718:	40014800 	.word	0x40014800

0800271c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2201      	movs	r2, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1a      	ldr	r2, [r3, #32]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	431a      	orrs	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	621a      	str	r2, [r3, #32]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800277c:	2302      	movs	r3, #2
 800277e:	e050      	b.n	8002822 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d013      	beq.n	80027f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00e      	beq.n	80027f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a13      	ldr	r2, [pc, #76]	; (8002840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10c      	bne.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	4313      	orrs	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40010000 	.word	0x40010000
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800
 800283c:	40000c00 	.word	0x40000c00
 8002840:	40014000 	.word	0x40014000

08002844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e03f      	b.n	80028d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fcde 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f829 	bl	80028e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800289c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b0c0      	sub	sp, #256	; 0x100
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	68d9      	ldr	r1, [r3, #12]
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	ea40 0301 	orr.w	r3, r0, r1
 8002908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	431a      	orrs	r2, r3
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002938:	f021 010c 	bic.w	r1, r1, #12
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002946:	430b      	orrs	r3, r1
 8002948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	6999      	ldr	r1, [r3, #24]
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	ea40 0301 	orr.w	r3, r0, r1
 8002966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b8f      	ldr	r3, [pc, #572]	; (8002bac <UART_SetConfig+0x2cc>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d005      	beq.n	8002980 <UART_SetConfig+0xa0>
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b8d      	ldr	r3, [pc, #564]	; (8002bb0 <UART_SetConfig+0x2d0>)
 800297c:	429a      	cmp	r2, r3
 800297e:	d104      	bne.n	800298a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002980:	f7ff fd04 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8002984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002988:	e003      	b.n	8002992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800298a:	f7ff fceb 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 800298e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	f040 810c 	bne.w	8002bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029b2:	4622      	mov	r2, r4
 80029b4:	462b      	mov	r3, r5
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80029ba:	415b      	adcs	r3, r3
 80029bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029c2:	4621      	mov	r1, r4
 80029c4:	eb12 0801 	adds.w	r8, r2, r1
 80029c8:	4629      	mov	r1, r5
 80029ca:	eb43 0901 	adc.w	r9, r3, r1
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e2:	4690      	mov	r8, r2
 80029e4:	4699      	mov	r9, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	eb18 0303 	adds.w	r3, r8, r3
 80029ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029f0:	462b      	mov	r3, r5
 80029f2:	eb49 0303 	adc.w	r3, r9, r3
 80029f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a0e:	460b      	mov	r3, r1
 8002a10:	18db      	adds	r3, r3, r3
 8002a12:	653b      	str	r3, [r7, #80]	; 0x50
 8002a14:	4613      	mov	r3, r2
 8002a16:	eb42 0303 	adc.w	r3, r2, r3
 8002a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a24:	f7fe f81a 	bl	8000a5c <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	011c      	lsls	r4, r3, #4
 8002a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	1891      	adds	r1, r2, r2
 8002a4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a50:	415b      	adcs	r3, r3
 8002a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a58:	4641      	mov	r1, r8
 8002a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a5e:	4649      	mov	r1, r9
 8002a60:	eb43 0b01 	adc.w	fp, r3, r1
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a78:	4692      	mov	sl, r2
 8002a7a:	469b      	mov	fp, r3
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a86:	464b      	mov	r3, r9
 8002a88:	eb4b 0303 	adc.w	r3, fp, r3
 8002a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	18db      	adds	r3, r3, r3
 8002aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8002aaa:	4613      	mov	r3, r2
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aba:	f7fd ffcf 	bl	8000a5c <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2264      	movs	r2, #100	; 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002adc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ae8:	441c      	add	r4, r3
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002afc:	4642      	mov	r2, r8
 8002afe:	464b      	mov	r3, r9
 8002b00:	1891      	adds	r1, r2, r2
 8002b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b04:	415b      	adcs	r3, r3
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	1851      	adds	r1, r2, r1
 8002b10:	6339      	str	r1, [r7, #48]	; 0x30
 8002b12:	4649      	mov	r1, r9
 8002b14:	414b      	adcs	r3, r1
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b24:	4659      	mov	r1, fp
 8002b26:	00cb      	lsls	r3, r1, #3
 8002b28:	4651      	mov	r1, sl
 8002b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2e:	4651      	mov	r1, sl
 8002b30:	00ca      	lsls	r2, r1, #3
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	4642      	mov	r2, r8
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b40:	464b      	mov	r3, r9
 8002b42:	460a      	mov	r2, r1
 8002b44:	eb42 0303 	adc.w	r3, r2, r3
 8002b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b60:	460b      	mov	r3, r1
 8002b62:	18db      	adds	r3, r3, r3
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b66:	4613      	mov	r3, r2
 8002b68:	eb42 0303 	adc.w	r3, r2, r3
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b76:	f7fd ff71 	bl	8000a5c <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 0207 	and.w	r2, r3, #7
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ba8:	e105      	b.n	8002db6 <UART_SetConfig+0x4d6>
 8002baa:	bf00      	nop
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	40011400 	.word	0x40011400
 8002bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bca:	4642      	mov	r2, r8
 8002bcc:	464b      	mov	r3, r9
 8002bce:	1891      	adds	r1, r2, r2
 8002bd0:	6239      	str	r1, [r7, #32]
 8002bd2:	415b      	adcs	r3, r3
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bda:	4641      	mov	r1, r8
 8002bdc:	1854      	adds	r4, r2, r1
 8002bde:	4649      	mov	r1, r9
 8002be0:	eb43 0501 	adc.w	r5, r3, r1
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	00eb      	lsls	r3, r5, #3
 8002bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf2:	00e2      	lsls	r2, r4, #3
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	4643      	mov	r3, r8
 8002bfa:	18e3      	adds	r3, r4, r3
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c00:	464b      	mov	r3, r9
 8002c02:	eb45 0303 	adc.w	r3, r5, r3
 8002c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c26:	4629      	mov	r1, r5
 8002c28:	008b      	lsls	r3, r1, #2
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c30:	4621      	mov	r1, r4
 8002c32:	008a      	lsls	r2, r1, #2
 8002c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c38:	f7fd ff10 	bl	8000a5c <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b60      	ldr	r3, [pc, #384]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002c42:	fba3 2302 	umull	r2, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	011c      	lsls	r4, r3, #4
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	61b9      	str	r1, [r7, #24]
 8002c64:	415b      	adcs	r3, r3
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	1851      	adds	r1, r2, r1
 8002c70:	6139      	str	r1, [r7, #16]
 8002c72:	4649      	mov	r1, r9
 8002c74:	414b      	adcs	r3, r1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c84:	4659      	mov	r1, fp
 8002c86:	00cb      	lsls	r3, r1, #3
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	4651      	mov	r1, sl
 8002c90:	00ca      	lsls	r2, r1, #3
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	008b      	lsls	r3, r1, #2
 8002cc8:	4641      	mov	r1, r8
 8002cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cce:	4641      	mov	r1, r8
 8002cd0:	008a      	lsls	r2, r1, #2
 8002cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cd6:	f7fd fec1 	bl	8000a5c <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	2164      	movs	r1, #100	; 0x64
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	3332      	adds	r3, #50	; 0x32
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfe:	441c      	add	r4, r3
 8002d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d04:	2200      	movs	r2, #0
 8002d06:	673b      	str	r3, [r7, #112]	; 0x70
 8002d08:	677a      	str	r2, [r7, #116]	; 0x74
 8002d0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d0e:	4642      	mov	r2, r8
 8002d10:	464b      	mov	r3, r9
 8002d12:	1891      	adds	r1, r2, r2
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	415b      	adcs	r3, r3
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d1e:	4641      	mov	r1, r8
 8002d20:	1851      	adds	r1, r2, r1
 8002d22:	6039      	str	r1, [r7, #0]
 8002d24:	4649      	mov	r1, r9
 8002d26:	414b      	adcs	r3, r1
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d36:	4659      	mov	r1, fp
 8002d38:	00cb      	lsls	r3, r1, #3
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d40:	4651      	mov	r1, sl
 8002d42:	00ca      	lsls	r2, r1, #3
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	189b      	adds	r3, r3, r2
 8002d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d50:	464b      	mov	r3, r9
 8002d52:	460a      	mov	r2, r1
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	663b      	str	r3, [r7, #96]	; 0x60
 8002d64:	667a      	str	r2, [r7, #100]	; 0x64
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d72:	4649      	mov	r1, r9
 8002d74:	008b      	lsls	r3, r1, #2
 8002d76:	4641      	mov	r1, r8
 8002d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	008a      	lsls	r2, r1, #2
 8002d80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d84:	f7fd fe6a 	bl	8000a5c <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2164      	movs	r1, #100	; 0x64
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	; 0x32
 8002da0:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4422      	add	r2, r4
 8002db4:	609a      	str	r2, [r3, #8]
}
 8002db6:	bf00      	nop
 8002db8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	51eb851f 	.word	0x51eb851f

08002dc8 <__errno>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <__errno+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4d0d      	ldr	r5, [pc, #52]	; (8002e0c <__libc_init_array+0x38>)
 8002dd8:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	2600      	movs	r6, #0
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	4d0b      	ldr	r5, [pc, #44]	; (8002e14 <__libc_init_array+0x40>)
 8002de6:	4c0c      	ldr	r4, [pc, #48]	; (8002e18 <__libc_init_array+0x44>)
 8002de8:	f000 ffae 	bl	8003d48 <_init>
 8002dec:	1b64      	subs	r4, r4, r5
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	2600      	movs	r6, #0
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08003e28 	.word	0x08003e28
 8002e10:	08003e28 	.word	0x08003e28
 8002e14:	08003e28 	.word	0x08003e28
 8002e18:	08003e2c 	.word	0x08003e2c

08002e1c <memset>:
 8002e1c:	4402      	add	r2, r0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <iprintf>:
 8002e2c:	b40f      	push	{r0, r1, r2, r3}
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <iprintf+0x2c>)
 8002e30:	b513      	push	{r0, r1, r4, lr}
 8002e32:	681c      	ldr	r4, [r3, #0]
 8002e34:	b124      	cbz	r4, 8002e40 <iprintf+0x14>
 8002e36:	69a3      	ldr	r3, [r4, #24]
 8002e38:	b913      	cbnz	r3, 8002e40 <iprintf+0x14>
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 f866 	bl	8002f0c <__sinit>
 8002e40:	ab05      	add	r3, sp, #20
 8002e42:	9a04      	ldr	r2, [sp, #16]
 8002e44:	68a1      	ldr	r1, [r4, #8]
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f000 f9bd 	bl	80031c8 <_vfiprintf_r>
 8002e4e:	b002      	add	sp, #8
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e54:	b004      	add	sp, #16
 8002e56:	4770      	bx	lr
 8002e58:	2000000c 	.word	0x2000000c

08002e5c <std>:
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	b510      	push	{r4, lr}
 8002e60:	4604      	mov	r4, r0
 8002e62:	e9c0 3300 	strd	r3, r3, [r0]
 8002e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e6a:	6083      	str	r3, [r0, #8]
 8002e6c:	8181      	strh	r1, [r0, #12]
 8002e6e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e70:	81c2      	strh	r2, [r0, #14]
 8002e72:	6183      	str	r3, [r0, #24]
 8002e74:	4619      	mov	r1, r3
 8002e76:	2208      	movs	r2, #8
 8002e78:	305c      	adds	r0, #92	; 0x5c
 8002e7a:	f7ff ffcf 	bl	8002e1c <memset>
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <std+0x38>)
 8002e80:	6263      	str	r3, [r4, #36]	; 0x24
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <std+0x3c>)
 8002e84:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <std+0x40>)
 8002e88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <std+0x44>)
 8002e8c:	6224      	str	r4, [r4, #32]
 8002e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8002e90:	bd10      	pop	{r4, pc}
 8002e92:	bf00      	nop
 8002e94:	08003771 	.word	0x08003771
 8002e98:	08003793 	.word	0x08003793
 8002e9c:	080037cb 	.word	0x080037cb
 8002ea0:	080037ef 	.word	0x080037ef

08002ea4 <_cleanup_r>:
 8002ea4:	4901      	ldr	r1, [pc, #4]	; (8002eac <_cleanup_r+0x8>)
 8002ea6:	f000 b8af 	b.w	8003008 <_fwalk_reent>
 8002eaa:	bf00      	nop
 8002eac:	08003ac9 	.word	0x08003ac9

08002eb0 <__sfmoreglue>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	2268      	movs	r2, #104	; 0x68
 8002eb4:	1e4d      	subs	r5, r1, #1
 8002eb6:	4355      	muls	r5, r2
 8002eb8:	460e      	mov	r6, r1
 8002eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ebe:	f000 f8e5 	bl	800308c <_malloc_r>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	b140      	cbz	r0, 8002ed8 <__sfmoreglue+0x28>
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	e9c0 1600 	strd	r1, r6, [r0]
 8002ecc:	300c      	adds	r0, #12
 8002ece:	60a0      	str	r0, [r4, #8]
 8002ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ed4:	f7ff ffa2 	bl	8002e1c <memset>
 8002ed8:	4620      	mov	r0, r4
 8002eda:	bd70      	pop	{r4, r5, r6, pc}

08002edc <__sfp_lock_acquire>:
 8002edc:	4801      	ldr	r0, [pc, #4]	; (8002ee4 <__sfp_lock_acquire+0x8>)
 8002ede:	f000 b8b3 	b.w	8003048 <__retarget_lock_acquire_recursive>
 8002ee2:	bf00      	nop
 8002ee4:	2000012d 	.word	0x2000012d

08002ee8 <__sfp_lock_release>:
 8002ee8:	4801      	ldr	r0, [pc, #4]	; (8002ef0 <__sfp_lock_release+0x8>)
 8002eea:	f000 b8ae 	b.w	800304a <__retarget_lock_release_recursive>
 8002eee:	bf00      	nop
 8002ef0:	2000012d 	.word	0x2000012d

08002ef4 <__sinit_lock_acquire>:
 8002ef4:	4801      	ldr	r0, [pc, #4]	; (8002efc <__sinit_lock_acquire+0x8>)
 8002ef6:	f000 b8a7 	b.w	8003048 <__retarget_lock_acquire_recursive>
 8002efa:	bf00      	nop
 8002efc:	2000012e 	.word	0x2000012e

08002f00 <__sinit_lock_release>:
 8002f00:	4801      	ldr	r0, [pc, #4]	; (8002f08 <__sinit_lock_release+0x8>)
 8002f02:	f000 b8a2 	b.w	800304a <__retarget_lock_release_recursive>
 8002f06:	bf00      	nop
 8002f08:	2000012e 	.word	0x2000012e

08002f0c <__sinit>:
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	4604      	mov	r4, r0
 8002f10:	f7ff fff0 	bl	8002ef4 <__sinit_lock_acquire>
 8002f14:	69a3      	ldr	r3, [r4, #24]
 8002f16:	b11b      	cbz	r3, 8002f20 <__sinit+0x14>
 8002f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f1c:	f7ff bff0 	b.w	8002f00 <__sinit_lock_release>
 8002f20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f24:	6523      	str	r3, [r4, #80]	; 0x50
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <__sinit+0x68>)
 8002f28:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <__sinit+0x6c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f2e:	42a3      	cmp	r3, r4
 8002f30:	bf04      	itt	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	61a3      	streq	r3, [r4, #24]
 8002f36:	4620      	mov	r0, r4
 8002f38:	f000 f820 	bl	8002f7c <__sfp>
 8002f3c:	6060      	str	r0, [r4, #4]
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f000 f81c 	bl	8002f7c <__sfp>
 8002f44:	60a0      	str	r0, [r4, #8]
 8002f46:	4620      	mov	r0, r4
 8002f48:	f000 f818 	bl	8002f7c <__sfp>
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60e0      	str	r0, [r4, #12]
 8002f50:	2104      	movs	r1, #4
 8002f52:	6860      	ldr	r0, [r4, #4]
 8002f54:	f7ff ff82 	bl	8002e5c <std>
 8002f58:	68a0      	ldr	r0, [r4, #8]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2109      	movs	r1, #9
 8002f5e:	f7ff ff7d 	bl	8002e5c <std>
 8002f62:	68e0      	ldr	r0, [r4, #12]
 8002f64:	2202      	movs	r2, #2
 8002f66:	2112      	movs	r1, #18
 8002f68:	f7ff ff78 	bl	8002e5c <std>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	61a3      	str	r3, [r4, #24]
 8002f70:	e7d2      	b.n	8002f18 <__sinit+0xc>
 8002f72:	bf00      	nop
 8002f74:	08003d88 	.word	0x08003d88
 8002f78:	08002ea5 	.word	0x08002ea5

08002f7c <__sfp>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	4607      	mov	r7, r0
 8002f80:	f7ff ffac 	bl	8002edc <__sfp_lock_acquire>
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <__sfp+0x84>)
 8002f86:	681e      	ldr	r6, [r3, #0]
 8002f88:	69b3      	ldr	r3, [r6, #24]
 8002f8a:	b913      	cbnz	r3, 8002f92 <__sfp+0x16>
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f7ff ffbd 	bl	8002f0c <__sinit>
 8002f92:	3648      	adds	r6, #72	; 0x48
 8002f94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	d503      	bpl.n	8002fa4 <__sfp+0x28>
 8002f9c:	6833      	ldr	r3, [r6, #0]
 8002f9e:	b30b      	cbz	r3, 8002fe4 <__sfp+0x68>
 8002fa0:	6836      	ldr	r6, [r6, #0]
 8002fa2:	e7f7      	b.n	8002f94 <__sfp+0x18>
 8002fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fa8:	b9d5      	cbnz	r5, 8002fe0 <__sfp+0x64>
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <__sfp+0x88>)
 8002fac:	60e3      	str	r3, [r4, #12]
 8002fae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fb2:	6665      	str	r5, [r4, #100]	; 0x64
 8002fb4:	f000 f847 	bl	8003046 <__retarget_lock_init_recursive>
 8002fb8:	f7ff ff96 	bl	8002ee8 <__sfp_lock_release>
 8002fbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002fc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002fc4:	6025      	str	r5, [r4, #0]
 8002fc6:	61a5      	str	r5, [r4, #24]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fd0:	f7ff ff24 	bl	8002e1c <memset>
 8002fd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fdc:	4620      	mov	r0, r4
 8002fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe0:	3468      	adds	r4, #104	; 0x68
 8002fe2:	e7d9      	b.n	8002f98 <__sfp+0x1c>
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	f7ff ff62 	bl	8002eb0 <__sfmoreglue>
 8002fec:	4604      	mov	r4, r0
 8002fee:	6030      	str	r0, [r6, #0]
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d1d5      	bne.n	8002fa0 <__sfp+0x24>
 8002ff4:	f7ff ff78 	bl	8002ee8 <__sfp_lock_release>
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	e7ee      	b.n	8002fdc <__sfp+0x60>
 8002ffe:	bf00      	nop
 8003000:	08003d88 	.word	0x08003d88
 8003004:	ffff0001 	.word	0xffff0001

08003008 <_fwalk_reent>:
 8003008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800300c:	4606      	mov	r6, r0
 800300e:	4688      	mov	r8, r1
 8003010:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003014:	2700      	movs	r7, #0
 8003016:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800301a:	f1b9 0901 	subs.w	r9, r9, #1
 800301e:	d505      	bpl.n	800302c <_fwalk_reent+0x24>
 8003020:	6824      	ldr	r4, [r4, #0]
 8003022:	2c00      	cmp	r4, #0
 8003024:	d1f7      	bne.n	8003016 <_fwalk_reent+0xe>
 8003026:	4638      	mov	r0, r7
 8003028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800302c:	89ab      	ldrh	r3, [r5, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d907      	bls.n	8003042 <_fwalk_reent+0x3a>
 8003032:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003036:	3301      	adds	r3, #1
 8003038:	d003      	beq.n	8003042 <_fwalk_reent+0x3a>
 800303a:	4629      	mov	r1, r5
 800303c:	4630      	mov	r0, r6
 800303e:	47c0      	blx	r8
 8003040:	4307      	orrs	r7, r0
 8003042:	3568      	adds	r5, #104	; 0x68
 8003044:	e7e9      	b.n	800301a <_fwalk_reent+0x12>

08003046 <__retarget_lock_init_recursive>:
 8003046:	4770      	bx	lr

08003048 <__retarget_lock_acquire_recursive>:
 8003048:	4770      	bx	lr

0800304a <__retarget_lock_release_recursive>:
 800304a:	4770      	bx	lr

0800304c <sbrk_aligned>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4e0e      	ldr	r6, [pc, #56]	; (8003088 <sbrk_aligned+0x3c>)
 8003050:	460c      	mov	r4, r1
 8003052:	6831      	ldr	r1, [r6, #0]
 8003054:	4605      	mov	r5, r0
 8003056:	b911      	cbnz	r1, 800305e <sbrk_aligned+0x12>
 8003058:	f000 fb7a 	bl	8003750 <_sbrk_r>
 800305c:	6030      	str	r0, [r6, #0]
 800305e:	4621      	mov	r1, r4
 8003060:	4628      	mov	r0, r5
 8003062:	f000 fb75 	bl	8003750 <_sbrk_r>
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	d00a      	beq.n	8003080 <sbrk_aligned+0x34>
 800306a:	1cc4      	adds	r4, r0, #3
 800306c:	f024 0403 	bic.w	r4, r4, #3
 8003070:	42a0      	cmp	r0, r4
 8003072:	d007      	beq.n	8003084 <sbrk_aligned+0x38>
 8003074:	1a21      	subs	r1, r4, r0
 8003076:	4628      	mov	r0, r5
 8003078:	f000 fb6a 	bl	8003750 <_sbrk_r>
 800307c:	3001      	adds	r0, #1
 800307e:	d101      	bne.n	8003084 <sbrk_aligned+0x38>
 8003080:	f04f 34ff 	mov.w	r4, #4294967295
 8003084:	4620      	mov	r0, r4
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	20000134 	.word	0x20000134

0800308c <_malloc_r>:
 800308c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003090:	1ccd      	adds	r5, r1, #3
 8003092:	f025 0503 	bic.w	r5, r5, #3
 8003096:	3508      	adds	r5, #8
 8003098:	2d0c      	cmp	r5, #12
 800309a:	bf38      	it	cc
 800309c:	250c      	movcc	r5, #12
 800309e:	2d00      	cmp	r5, #0
 80030a0:	4607      	mov	r7, r0
 80030a2:	db01      	blt.n	80030a8 <_malloc_r+0x1c>
 80030a4:	42a9      	cmp	r1, r5
 80030a6:	d905      	bls.n	80030b4 <_malloc_r+0x28>
 80030a8:	230c      	movs	r3, #12
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	2600      	movs	r6, #0
 80030ae:	4630      	mov	r0, r6
 80030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030b4:	4e2e      	ldr	r6, [pc, #184]	; (8003170 <_malloc_r+0xe4>)
 80030b6:	f000 fdbb 	bl	8003c30 <__malloc_lock>
 80030ba:	6833      	ldr	r3, [r6, #0]
 80030bc:	461c      	mov	r4, r3
 80030be:	bb34      	cbnz	r4, 800310e <_malloc_r+0x82>
 80030c0:	4629      	mov	r1, r5
 80030c2:	4638      	mov	r0, r7
 80030c4:	f7ff ffc2 	bl	800304c <sbrk_aligned>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	4604      	mov	r4, r0
 80030cc:	d14d      	bne.n	800316a <_malloc_r+0xde>
 80030ce:	6834      	ldr	r4, [r6, #0]
 80030d0:	4626      	mov	r6, r4
 80030d2:	2e00      	cmp	r6, #0
 80030d4:	d140      	bne.n	8003158 <_malloc_r+0xcc>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	4631      	mov	r1, r6
 80030da:	4638      	mov	r0, r7
 80030dc:	eb04 0803 	add.w	r8, r4, r3
 80030e0:	f000 fb36 	bl	8003750 <_sbrk_r>
 80030e4:	4580      	cmp	r8, r0
 80030e6:	d13a      	bne.n	800315e <_malloc_r+0xd2>
 80030e8:	6821      	ldr	r1, [r4, #0]
 80030ea:	3503      	adds	r5, #3
 80030ec:	1a6d      	subs	r5, r5, r1
 80030ee:	f025 0503 	bic.w	r5, r5, #3
 80030f2:	3508      	adds	r5, #8
 80030f4:	2d0c      	cmp	r5, #12
 80030f6:	bf38      	it	cc
 80030f8:	250c      	movcc	r5, #12
 80030fa:	4629      	mov	r1, r5
 80030fc:	4638      	mov	r0, r7
 80030fe:	f7ff ffa5 	bl	800304c <sbrk_aligned>
 8003102:	3001      	adds	r0, #1
 8003104:	d02b      	beq.n	800315e <_malloc_r+0xd2>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	442b      	add	r3, r5
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	e00e      	b.n	800312c <_malloc_r+0xa0>
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	1b52      	subs	r2, r2, r5
 8003112:	d41e      	bmi.n	8003152 <_malloc_r+0xc6>
 8003114:	2a0b      	cmp	r2, #11
 8003116:	d916      	bls.n	8003146 <_malloc_r+0xba>
 8003118:	1961      	adds	r1, r4, r5
 800311a:	42a3      	cmp	r3, r4
 800311c:	6025      	str	r5, [r4, #0]
 800311e:	bf18      	it	ne
 8003120:	6059      	strne	r1, [r3, #4]
 8003122:	6863      	ldr	r3, [r4, #4]
 8003124:	bf08      	it	eq
 8003126:	6031      	streq	r1, [r6, #0]
 8003128:	5162      	str	r2, [r4, r5]
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	4638      	mov	r0, r7
 800312e:	f104 060b 	add.w	r6, r4, #11
 8003132:	f000 fd83 	bl	8003c3c <__malloc_unlock>
 8003136:	f026 0607 	bic.w	r6, r6, #7
 800313a:	1d23      	adds	r3, r4, #4
 800313c:	1af2      	subs	r2, r6, r3
 800313e:	d0b6      	beq.n	80030ae <_malloc_r+0x22>
 8003140:	1b9b      	subs	r3, r3, r6
 8003142:	50a3      	str	r3, [r4, r2]
 8003144:	e7b3      	b.n	80030ae <_malloc_r+0x22>
 8003146:	6862      	ldr	r2, [r4, #4]
 8003148:	42a3      	cmp	r3, r4
 800314a:	bf0c      	ite	eq
 800314c:	6032      	streq	r2, [r6, #0]
 800314e:	605a      	strne	r2, [r3, #4]
 8003150:	e7ec      	b.n	800312c <_malloc_r+0xa0>
 8003152:	4623      	mov	r3, r4
 8003154:	6864      	ldr	r4, [r4, #4]
 8003156:	e7b2      	b.n	80030be <_malloc_r+0x32>
 8003158:	4634      	mov	r4, r6
 800315a:	6876      	ldr	r6, [r6, #4]
 800315c:	e7b9      	b.n	80030d2 <_malloc_r+0x46>
 800315e:	230c      	movs	r3, #12
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4638      	mov	r0, r7
 8003164:	f000 fd6a 	bl	8003c3c <__malloc_unlock>
 8003168:	e7a1      	b.n	80030ae <_malloc_r+0x22>
 800316a:	6025      	str	r5, [r4, #0]
 800316c:	e7de      	b.n	800312c <_malloc_r+0xa0>
 800316e:	bf00      	nop
 8003170:	20000130 	.word	0x20000130

08003174 <__sfputc_r>:
 8003174:	6893      	ldr	r3, [r2, #8]
 8003176:	3b01      	subs	r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	b410      	push	{r4}
 800317c:	6093      	str	r3, [r2, #8]
 800317e:	da08      	bge.n	8003192 <__sfputc_r+0x1e>
 8003180:	6994      	ldr	r4, [r2, #24]
 8003182:	42a3      	cmp	r3, r4
 8003184:	db01      	blt.n	800318a <__sfputc_r+0x16>
 8003186:	290a      	cmp	r1, #10
 8003188:	d103      	bne.n	8003192 <__sfputc_r+0x1e>
 800318a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800318e:	f000 bb33 	b.w	80037f8 <__swbuf_r>
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	1c58      	adds	r0, r3, #1
 8003196:	6010      	str	r0, [r2, #0]
 8003198:	7019      	strb	r1, [r3, #0]
 800319a:	4608      	mov	r0, r1
 800319c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <__sfputs_r>:
 80031a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a4:	4606      	mov	r6, r0
 80031a6:	460f      	mov	r7, r1
 80031a8:	4614      	mov	r4, r2
 80031aa:	18d5      	adds	r5, r2, r3
 80031ac:	42ac      	cmp	r4, r5
 80031ae:	d101      	bne.n	80031b4 <__sfputs_r+0x12>
 80031b0:	2000      	movs	r0, #0
 80031b2:	e007      	b.n	80031c4 <__sfputs_r+0x22>
 80031b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b8:	463a      	mov	r2, r7
 80031ba:	4630      	mov	r0, r6
 80031bc:	f7ff ffda 	bl	8003174 <__sfputc_r>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d1f3      	bne.n	80031ac <__sfputs_r+0xa>
 80031c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031c8 <_vfiprintf_r>:
 80031c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031cc:	460d      	mov	r5, r1
 80031ce:	b09d      	sub	sp, #116	; 0x74
 80031d0:	4614      	mov	r4, r2
 80031d2:	4698      	mov	r8, r3
 80031d4:	4606      	mov	r6, r0
 80031d6:	b118      	cbz	r0, 80031e0 <_vfiprintf_r+0x18>
 80031d8:	6983      	ldr	r3, [r0, #24]
 80031da:	b90b      	cbnz	r3, 80031e0 <_vfiprintf_r+0x18>
 80031dc:	f7ff fe96 	bl	8002f0c <__sinit>
 80031e0:	4b89      	ldr	r3, [pc, #548]	; (8003408 <_vfiprintf_r+0x240>)
 80031e2:	429d      	cmp	r5, r3
 80031e4:	d11b      	bne.n	800321e <_vfiprintf_r+0x56>
 80031e6:	6875      	ldr	r5, [r6, #4]
 80031e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031ea:	07d9      	lsls	r1, r3, #31
 80031ec:	d405      	bmi.n	80031fa <_vfiprintf_r+0x32>
 80031ee:	89ab      	ldrh	r3, [r5, #12]
 80031f0:	059a      	lsls	r2, r3, #22
 80031f2:	d402      	bmi.n	80031fa <_vfiprintf_r+0x32>
 80031f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031f6:	f7ff ff27 	bl	8003048 <__retarget_lock_acquire_recursive>
 80031fa:	89ab      	ldrh	r3, [r5, #12]
 80031fc:	071b      	lsls	r3, r3, #28
 80031fe:	d501      	bpl.n	8003204 <_vfiprintf_r+0x3c>
 8003200:	692b      	ldr	r3, [r5, #16]
 8003202:	b9eb      	cbnz	r3, 8003240 <_vfiprintf_r+0x78>
 8003204:	4629      	mov	r1, r5
 8003206:	4630      	mov	r0, r6
 8003208:	f000 fb5a 	bl	80038c0 <__swsetup_r>
 800320c:	b1c0      	cbz	r0, 8003240 <_vfiprintf_r+0x78>
 800320e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003210:	07dc      	lsls	r4, r3, #31
 8003212:	d50e      	bpl.n	8003232 <_vfiprintf_r+0x6a>
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	b01d      	add	sp, #116	; 0x74
 800321a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321e:	4b7b      	ldr	r3, [pc, #492]	; (800340c <_vfiprintf_r+0x244>)
 8003220:	429d      	cmp	r5, r3
 8003222:	d101      	bne.n	8003228 <_vfiprintf_r+0x60>
 8003224:	68b5      	ldr	r5, [r6, #8]
 8003226:	e7df      	b.n	80031e8 <_vfiprintf_r+0x20>
 8003228:	4b79      	ldr	r3, [pc, #484]	; (8003410 <_vfiprintf_r+0x248>)
 800322a:	429d      	cmp	r5, r3
 800322c:	bf08      	it	eq
 800322e:	68f5      	ldreq	r5, [r6, #12]
 8003230:	e7da      	b.n	80031e8 <_vfiprintf_r+0x20>
 8003232:	89ab      	ldrh	r3, [r5, #12]
 8003234:	0598      	lsls	r0, r3, #22
 8003236:	d4ed      	bmi.n	8003214 <_vfiprintf_r+0x4c>
 8003238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800323a:	f7ff ff06 	bl	800304a <__retarget_lock_release_recursive>
 800323e:	e7e9      	b.n	8003214 <_vfiprintf_r+0x4c>
 8003240:	2300      	movs	r3, #0
 8003242:	9309      	str	r3, [sp, #36]	; 0x24
 8003244:	2320      	movs	r3, #32
 8003246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800324a:	f8cd 800c 	str.w	r8, [sp, #12]
 800324e:	2330      	movs	r3, #48	; 0x30
 8003250:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003414 <_vfiprintf_r+0x24c>
 8003254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003258:	f04f 0901 	mov.w	r9, #1
 800325c:	4623      	mov	r3, r4
 800325e:	469a      	mov	sl, r3
 8003260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003264:	b10a      	cbz	r2, 800326a <_vfiprintf_r+0xa2>
 8003266:	2a25      	cmp	r2, #37	; 0x25
 8003268:	d1f9      	bne.n	800325e <_vfiprintf_r+0x96>
 800326a:	ebba 0b04 	subs.w	fp, sl, r4
 800326e:	d00b      	beq.n	8003288 <_vfiprintf_r+0xc0>
 8003270:	465b      	mov	r3, fp
 8003272:	4622      	mov	r2, r4
 8003274:	4629      	mov	r1, r5
 8003276:	4630      	mov	r0, r6
 8003278:	f7ff ff93 	bl	80031a2 <__sfputs_r>
 800327c:	3001      	adds	r0, #1
 800327e:	f000 80aa 	beq.w	80033d6 <_vfiprintf_r+0x20e>
 8003282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003284:	445a      	add	r2, fp
 8003286:	9209      	str	r2, [sp, #36]	; 0x24
 8003288:	f89a 3000 	ldrb.w	r3, [sl]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a2 	beq.w	80033d6 <_vfiprintf_r+0x20e>
 8003292:	2300      	movs	r3, #0
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800329c:	f10a 0a01 	add.w	sl, sl, #1
 80032a0:	9304      	str	r3, [sp, #16]
 80032a2:	9307      	str	r3, [sp, #28]
 80032a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032a8:	931a      	str	r3, [sp, #104]	; 0x68
 80032aa:	4654      	mov	r4, sl
 80032ac:	2205      	movs	r2, #5
 80032ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b2:	4858      	ldr	r0, [pc, #352]	; (8003414 <_vfiprintf_r+0x24c>)
 80032b4:	f7fc ff94 	bl	80001e0 <memchr>
 80032b8:	9a04      	ldr	r2, [sp, #16]
 80032ba:	b9d8      	cbnz	r0, 80032f4 <_vfiprintf_r+0x12c>
 80032bc:	06d1      	lsls	r1, r2, #27
 80032be:	bf44      	itt	mi
 80032c0:	2320      	movmi	r3, #32
 80032c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032c6:	0713      	lsls	r3, r2, #28
 80032c8:	bf44      	itt	mi
 80032ca:	232b      	movmi	r3, #43	; 0x2b
 80032cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032d0:	f89a 3000 	ldrb.w	r3, [sl]
 80032d4:	2b2a      	cmp	r3, #42	; 0x2a
 80032d6:	d015      	beq.n	8003304 <_vfiprintf_r+0x13c>
 80032d8:	9a07      	ldr	r2, [sp, #28]
 80032da:	4654      	mov	r4, sl
 80032dc:	2000      	movs	r0, #0
 80032de:	f04f 0c0a 	mov.w	ip, #10
 80032e2:	4621      	mov	r1, r4
 80032e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032e8:	3b30      	subs	r3, #48	; 0x30
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d94e      	bls.n	800338c <_vfiprintf_r+0x1c4>
 80032ee:	b1b0      	cbz	r0, 800331e <_vfiprintf_r+0x156>
 80032f0:	9207      	str	r2, [sp, #28]
 80032f2:	e014      	b.n	800331e <_vfiprintf_r+0x156>
 80032f4:	eba0 0308 	sub.w	r3, r0, r8
 80032f8:	fa09 f303 	lsl.w	r3, r9, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	9304      	str	r3, [sp, #16]
 8003300:	46a2      	mov	sl, r4
 8003302:	e7d2      	b.n	80032aa <_vfiprintf_r+0xe2>
 8003304:	9b03      	ldr	r3, [sp, #12]
 8003306:	1d19      	adds	r1, r3, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	9103      	str	r1, [sp, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	bfbb      	ittet	lt
 8003310:	425b      	neglt	r3, r3
 8003312:	f042 0202 	orrlt.w	r2, r2, #2
 8003316:	9307      	strge	r3, [sp, #28]
 8003318:	9307      	strlt	r3, [sp, #28]
 800331a:	bfb8      	it	lt
 800331c:	9204      	strlt	r2, [sp, #16]
 800331e:	7823      	ldrb	r3, [r4, #0]
 8003320:	2b2e      	cmp	r3, #46	; 0x2e
 8003322:	d10c      	bne.n	800333e <_vfiprintf_r+0x176>
 8003324:	7863      	ldrb	r3, [r4, #1]
 8003326:	2b2a      	cmp	r3, #42	; 0x2a
 8003328:	d135      	bne.n	8003396 <_vfiprintf_r+0x1ce>
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	1d1a      	adds	r2, r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	9203      	str	r2, [sp, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	bfb8      	it	lt
 8003336:	f04f 33ff 	movlt.w	r3, #4294967295
 800333a:	3402      	adds	r4, #2
 800333c:	9305      	str	r3, [sp, #20]
 800333e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003424 <_vfiprintf_r+0x25c>
 8003342:	7821      	ldrb	r1, [r4, #0]
 8003344:	2203      	movs	r2, #3
 8003346:	4650      	mov	r0, sl
 8003348:	f7fc ff4a 	bl	80001e0 <memchr>
 800334c:	b140      	cbz	r0, 8003360 <_vfiprintf_r+0x198>
 800334e:	2340      	movs	r3, #64	; 0x40
 8003350:	eba0 000a 	sub.w	r0, r0, sl
 8003354:	fa03 f000 	lsl.w	r0, r3, r0
 8003358:	9b04      	ldr	r3, [sp, #16]
 800335a:	4303      	orrs	r3, r0
 800335c:	3401      	adds	r4, #1
 800335e:	9304      	str	r3, [sp, #16]
 8003360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003364:	482c      	ldr	r0, [pc, #176]	; (8003418 <_vfiprintf_r+0x250>)
 8003366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800336a:	2206      	movs	r2, #6
 800336c:	f7fc ff38 	bl	80001e0 <memchr>
 8003370:	2800      	cmp	r0, #0
 8003372:	d03f      	beq.n	80033f4 <_vfiprintf_r+0x22c>
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <_vfiprintf_r+0x254>)
 8003376:	bb1b      	cbnz	r3, 80033c0 <_vfiprintf_r+0x1f8>
 8003378:	9b03      	ldr	r3, [sp, #12]
 800337a:	3307      	adds	r3, #7
 800337c:	f023 0307 	bic.w	r3, r3, #7
 8003380:	3308      	adds	r3, #8
 8003382:	9303      	str	r3, [sp, #12]
 8003384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003386:	443b      	add	r3, r7
 8003388:	9309      	str	r3, [sp, #36]	; 0x24
 800338a:	e767      	b.n	800325c <_vfiprintf_r+0x94>
 800338c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003390:	460c      	mov	r4, r1
 8003392:	2001      	movs	r0, #1
 8003394:	e7a5      	b.n	80032e2 <_vfiprintf_r+0x11a>
 8003396:	2300      	movs	r3, #0
 8003398:	3401      	adds	r4, #1
 800339a:	9305      	str	r3, [sp, #20]
 800339c:	4619      	mov	r1, r3
 800339e:	f04f 0c0a 	mov.w	ip, #10
 80033a2:	4620      	mov	r0, r4
 80033a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033a8:	3a30      	subs	r2, #48	; 0x30
 80033aa:	2a09      	cmp	r2, #9
 80033ac:	d903      	bls.n	80033b6 <_vfiprintf_r+0x1ee>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0c5      	beq.n	800333e <_vfiprintf_r+0x176>
 80033b2:	9105      	str	r1, [sp, #20]
 80033b4:	e7c3      	b.n	800333e <_vfiprintf_r+0x176>
 80033b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ba:	4604      	mov	r4, r0
 80033bc:	2301      	movs	r3, #1
 80033be:	e7f0      	b.n	80033a2 <_vfiprintf_r+0x1da>
 80033c0:	ab03      	add	r3, sp, #12
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	462a      	mov	r2, r5
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <_vfiprintf_r+0x258>)
 80033c8:	a904      	add	r1, sp, #16
 80033ca:	4630      	mov	r0, r6
 80033cc:	f3af 8000 	nop.w
 80033d0:	4607      	mov	r7, r0
 80033d2:	1c78      	adds	r0, r7, #1
 80033d4:	d1d6      	bne.n	8003384 <_vfiprintf_r+0x1bc>
 80033d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033d8:	07d9      	lsls	r1, r3, #31
 80033da:	d405      	bmi.n	80033e8 <_vfiprintf_r+0x220>
 80033dc:	89ab      	ldrh	r3, [r5, #12]
 80033de:	059a      	lsls	r2, r3, #22
 80033e0:	d402      	bmi.n	80033e8 <_vfiprintf_r+0x220>
 80033e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033e4:	f7ff fe31 	bl	800304a <__retarget_lock_release_recursive>
 80033e8:	89ab      	ldrh	r3, [r5, #12]
 80033ea:	065b      	lsls	r3, r3, #25
 80033ec:	f53f af12 	bmi.w	8003214 <_vfiprintf_r+0x4c>
 80033f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033f2:	e711      	b.n	8003218 <_vfiprintf_r+0x50>
 80033f4:	ab03      	add	r3, sp, #12
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	462a      	mov	r2, r5
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <_vfiprintf_r+0x258>)
 80033fc:	a904      	add	r1, sp, #16
 80033fe:	4630      	mov	r0, r6
 8003400:	f000 f880 	bl	8003504 <_printf_i>
 8003404:	e7e4      	b.n	80033d0 <_vfiprintf_r+0x208>
 8003406:	bf00      	nop
 8003408:	08003dac 	.word	0x08003dac
 800340c:	08003dcc 	.word	0x08003dcc
 8003410:	08003d8c 	.word	0x08003d8c
 8003414:	08003dec 	.word	0x08003dec
 8003418:	08003df6 	.word	0x08003df6
 800341c:	00000000 	.word	0x00000000
 8003420:	080031a3 	.word	0x080031a3
 8003424:	08003df2 	.word	0x08003df2

08003428 <_printf_common>:
 8003428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800342c:	4616      	mov	r6, r2
 800342e:	4699      	mov	r9, r3
 8003430:	688a      	ldr	r2, [r1, #8]
 8003432:	690b      	ldr	r3, [r1, #16]
 8003434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003438:	4293      	cmp	r3, r2
 800343a:	bfb8      	it	lt
 800343c:	4613      	movlt	r3, r2
 800343e:	6033      	str	r3, [r6, #0]
 8003440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003444:	4607      	mov	r7, r0
 8003446:	460c      	mov	r4, r1
 8003448:	b10a      	cbz	r2, 800344e <_printf_common+0x26>
 800344a:	3301      	adds	r3, #1
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	0699      	lsls	r1, r3, #26
 8003452:	bf42      	ittt	mi
 8003454:	6833      	ldrmi	r3, [r6, #0]
 8003456:	3302      	addmi	r3, #2
 8003458:	6033      	strmi	r3, [r6, #0]
 800345a:	6825      	ldr	r5, [r4, #0]
 800345c:	f015 0506 	ands.w	r5, r5, #6
 8003460:	d106      	bne.n	8003470 <_printf_common+0x48>
 8003462:	f104 0a19 	add.w	sl, r4, #25
 8003466:	68e3      	ldr	r3, [r4, #12]
 8003468:	6832      	ldr	r2, [r6, #0]
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	42ab      	cmp	r3, r5
 800346e:	dc26      	bgt.n	80034be <_printf_common+0x96>
 8003470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003474:	1e13      	subs	r3, r2, #0
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	bf18      	it	ne
 800347a:	2301      	movne	r3, #1
 800347c:	0692      	lsls	r2, r2, #26
 800347e:	d42b      	bmi.n	80034d8 <_printf_common+0xb0>
 8003480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003484:	4649      	mov	r1, r9
 8003486:	4638      	mov	r0, r7
 8003488:	47c0      	blx	r8
 800348a:	3001      	adds	r0, #1
 800348c:	d01e      	beq.n	80034cc <_printf_common+0xa4>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	68e5      	ldr	r5, [r4, #12]
 8003492:	6832      	ldr	r2, [r6, #0]
 8003494:	f003 0306 	and.w	r3, r3, #6
 8003498:	2b04      	cmp	r3, #4
 800349a:	bf08      	it	eq
 800349c:	1aad      	subeq	r5, r5, r2
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	bf0c      	ite	eq
 80034a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a8:	2500      	movne	r5, #0
 80034aa:	4293      	cmp	r3, r2
 80034ac:	bfc4      	itt	gt
 80034ae:	1a9b      	subgt	r3, r3, r2
 80034b0:	18ed      	addgt	r5, r5, r3
 80034b2:	2600      	movs	r6, #0
 80034b4:	341a      	adds	r4, #26
 80034b6:	42b5      	cmp	r5, r6
 80034b8:	d11a      	bne.n	80034f0 <_printf_common+0xc8>
 80034ba:	2000      	movs	r0, #0
 80034bc:	e008      	b.n	80034d0 <_printf_common+0xa8>
 80034be:	2301      	movs	r3, #1
 80034c0:	4652      	mov	r2, sl
 80034c2:	4649      	mov	r1, r9
 80034c4:	4638      	mov	r0, r7
 80034c6:	47c0      	blx	r8
 80034c8:	3001      	adds	r0, #1
 80034ca:	d103      	bne.n	80034d4 <_printf_common+0xac>
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d4:	3501      	adds	r5, #1
 80034d6:	e7c6      	b.n	8003466 <_printf_common+0x3e>
 80034d8:	18e1      	adds	r1, r4, r3
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	2030      	movs	r0, #48	; 0x30
 80034de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034e2:	4422      	add	r2, r4
 80034e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ec:	3302      	adds	r3, #2
 80034ee:	e7c7      	b.n	8003480 <_printf_common+0x58>
 80034f0:	2301      	movs	r3, #1
 80034f2:	4622      	mov	r2, r4
 80034f4:	4649      	mov	r1, r9
 80034f6:	4638      	mov	r0, r7
 80034f8:	47c0      	blx	r8
 80034fa:	3001      	adds	r0, #1
 80034fc:	d0e6      	beq.n	80034cc <_printf_common+0xa4>
 80034fe:	3601      	adds	r6, #1
 8003500:	e7d9      	b.n	80034b6 <_printf_common+0x8e>
	...

08003504 <_printf_i>:
 8003504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003508:	7e0f      	ldrb	r7, [r1, #24]
 800350a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800350c:	2f78      	cmp	r7, #120	; 0x78
 800350e:	4691      	mov	r9, r2
 8003510:	4680      	mov	r8, r0
 8003512:	460c      	mov	r4, r1
 8003514:	469a      	mov	sl, r3
 8003516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800351a:	d807      	bhi.n	800352c <_printf_i+0x28>
 800351c:	2f62      	cmp	r7, #98	; 0x62
 800351e:	d80a      	bhi.n	8003536 <_printf_i+0x32>
 8003520:	2f00      	cmp	r7, #0
 8003522:	f000 80d8 	beq.w	80036d6 <_printf_i+0x1d2>
 8003526:	2f58      	cmp	r7, #88	; 0x58
 8003528:	f000 80a3 	beq.w	8003672 <_printf_i+0x16e>
 800352c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003534:	e03a      	b.n	80035ac <_printf_i+0xa8>
 8003536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800353a:	2b15      	cmp	r3, #21
 800353c:	d8f6      	bhi.n	800352c <_printf_i+0x28>
 800353e:	a101      	add	r1, pc, #4	; (adr r1, 8003544 <_printf_i+0x40>)
 8003540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003544:	0800359d 	.word	0x0800359d
 8003548:	080035b1 	.word	0x080035b1
 800354c:	0800352d 	.word	0x0800352d
 8003550:	0800352d 	.word	0x0800352d
 8003554:	0800352d 	.word	0x0800352d
 8003558:	0800352d 	.word	0x0800352d
 800355c:	080035b1 	.word	0x080035b1
 8003560:	0800352d 	.word	0x0800352d
 8003564:	0800352d 	.word	0x0800352d
 8003568:	0800352d 	.word	0x0800352d
 800356c:	0800352d 	.word	0x0800352d
 8003570:	080036bd 	.word	0x080036bd
 8003574:	080035e1 	.word	0x080035e1
 8003578:	0800369f 	.word	0x0800369f
 800357c:	0800352d 	.word	0x0800352d
 8003580:	0800352d 	.word	0x0800352d
 8003584:	080036df 	.word	0x080036df
 8003588:	0800352d 	.word	0x0800352d
 800358c:	080035e1 	.word	0x080035e1
 8003590:	0800352d 	.word	0x0800352d
 8003594:	0800352d 	.word	0x0800352d
 8003598:	080036a7 	.word	0x080036a7
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	602a      	str	r2, [r5, #0]
 80035a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0a3      	b.n	80036f8 <_printf_i+0x1f4>
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	6829      	ldr	r1, [r5, #0]
 80035b4:	0606      	lsls	r6, r0, #24
 80035b6:	f101 0304 	add.w	r3, r1, #4
 80035ba:	d50a      	bpl.n	80035d2 <_printf_i+0xce>
 80035bc:	680e      	ldr	r6, [r1, #0]
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	2e00      	cmp	r6, #0
 80035c2:	da03      	bge.n	80035cc <_printf_i+0xc8>
 80035c4:	232d      	movs	r3, #45	; 0x2d
 80035c6:	4276      	negs	r6, r6
 80035c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035cc:	485e      	ldr	r0, [pc, #376]	; (8003748 <_printf_i+0x244>)
 80035ce:	230a      	movs	r3, #10
 80035d0:	e019      	b.n	8003606 <_printf_i+0x102>
 80035d2:	680e      	ldr	r6, [r1, #0]
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035da:	bf18      	it	ne
 80035dc:	b236      	sxthne	r6, r6
 80035de:	e7ef      	b.n	80035c0 <_printf_i+0xbc>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	6820      	ldr	r0, [r4, #0]
 80035e4:	1d19      	adds	r1, r3, #4
 80035e6:	6029      	str	r1, [r5, #0]
 80035e8:	0601      	lsls	r1, r0, #24
 80035ea:	d501      	bpl.n	80035f0 <_printf_i+0xec>
 80035ec:	681e      	ldr	r6, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <_printf_i+0xf2>
 80035f0:	0646      	lsls	r6, r0, #25
 80035f2:	d5fb      	bpl.n	80035ec <_printf_i+0xe8>
 80035f4:	881e      	ldrh	r6, [r3, #0]
 80035f6:	4854      	ldr	r0, [pc, #336]	; (8003748 <_printf_i+0x244>)
 80035f8:	2f6f      	cmp	r7, #111	; 0x6f
 80035fa:	bf0c      	ite	eq
 80035fc:	2308      	moveq	r3, #8
 80035fe:	230a      	movne	r3, #10
 8003600:	2100      	movs	r1, #0
 8003602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003606:	6865      	ldr	r5, [r4, #4]
 8003608:	60a5      	str	r5, [r4, #8]
 800360a:	2d00      	cmp	r5, #0
 800360c:	bfa2      	ittt	ge
 800360e:	6821      	ldrge	r1, [r4, #0]
 8003610:	f021 0104 	bicge.w	r1, r1, #4
 8003614:	6021      	strge	r1, [r4, #0]
 8003616:	b90e      	cbnz	r6, 800361c <_printf_i+0x118>
 8003618:	2d00      	cmp	r5, #0
 800361a:	d04d      	beq.n	80036b8 <_printf_i+0x1b4>
 800361c:	4615      	mov	r5, r2
 800361e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003622:	fb03 6711 	mls	r7, r3, r1, r6
 8003626:	5dc7      	ldrb	r7, [r0, r7]
 8003628:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800362c:	4637      	mov	r7, r6
 800362e:	42bb      	cmp	r3, r7
 8003630:	460e      	mov	r6, r1
 8003632:	d9f4      	bls.n	800361e <_printf_i+0x11a>
 8003634:	2b08      	cmp	r3, #8
 8003636:	d10b      	bne.n	8003650 <_printf_i+0x14c>
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	07de      	lsls	r6, r3, #31
 800363c:	d508      	bpl.n	8003650 <_printf_i+0x14c>
 800363e:	6923      	ldr	r3, [r4, #16]
 8003640:	6861      	ldr	r1, [r4, #4]
 8003642:	4299      	cmp	r1, r3
 8003644:	bfde      	ittt	le
 8003646:	2330      	movle	r3, #48	; 0x30
 8003648:	f805 3c01 	strble.w	r3, [r5, #-1]
 800364c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003650:	1b52      	subs	r2, r2, r5
 8003652:	6122      	str	r2, [r4, #16]
 8003654:	f8cd a000 	str.w	sl, [sp]
 8003658:	464b      	mov	r3, r9
 800365a:	aa03      	add	r2, sp, #12
 800365c:	4621      	mov	r1, r4
 800365e:	4640      	mov	r0, r8
 8003660:	f7ff fee2 	bl	8003428 <_printf_common>
 8003664:	3001      	adds	r0, #1
 8003666:	d14c      	bne.n	8003702 <_printf_i+0x1fe>
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	b004      	add	sp, #16
 800366e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003672:	4835      	ldr	r0, [pc, #212]	; (8003748 <_printf_i+0x244>)
 8003674:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003678:	6829      	ldr	r1, [r5, #0]
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003680:	6029      	str	r1, [r5, #0]
 8003682:	061d      	lsls	r5, r3, #24
 8003684:	d514      	bpl.n	80036b0 <_printf_i+0x1ac>
 8003686:	07df      	lsls	r7, r3, #31
 8003688:	bf44      	itt	mi
 800368a:	f043 0320 	orrmi.w	r3, r3, #32
 800368e:	6023      	strmi	r3, [r4, #0]
 8003690:	b91e      	cbnz	r6, 800369a <_printf_i+0x196>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	f023 0320 	bic.w	r3, r3, #32
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	2310      	movs	r3, #16
 800369c:	e7b0      	b.n	8003600 <_printf_i+0xfc>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f043 0320 	orr.w	r3, r3, #32
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	2378      	movs	r3, #120	; 0x78
 80036a8:	4828      	ldr	r0, [pc, #160]	; (800374c <_printf_i+0x248>)
 80036aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ae:	e7e3      	b.n	8003678 <_printf_i+0x174>
 80036b0:	0659      	lsls	r1, r3, #25
 80036b2:	bf48      	it	mi
 80036b4:	b2b6      	uxthmi	r6, r6
 80036b6:	e7e6      	b.n	8003686 <_printf_i+0x182>
 80036b8:	4615      	mov	r5, r2
 80036ba:	e7bb      	b.n	8003634 <_printf_i+0x130>
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	6826      	ldr	r6, [r4, #0]
 80036c0:	6961      	ldr	r1, [r4, #20]
 80036c2:	1d18      	adds	r0, r3, #4
 80036c4:	6028      	str	r0, [r5, #0]
 80036c6:	0635      	lsls	r5, r6, #24
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	d501      	bpl.n	80036d0 <_printf_i+0x1cc>
 80036cc:	6019      	str	r1, [r3, #0]
 80036ce:	e002      	b.n	80036d6 <_printf_i+0x1d2>
 80036d0:	0670      	lsls	r0, r6, #25
 80036d2:	d5fb      	bpl.n	80036cc <_printf_i+0x1c8>
 80036d4:	8019      	strh	r1, [r3, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	6123      	str	r3, [r4, #16]
 80036da:	4615      	mov	r5, r2
 80036dc:	e7ba      	b.n	8003654 <_printf_i+0x150>
 80036de:	682b      	ldr	r3, [r5, #0]
 80036e0:	1d1a      	adds	r2, r3, #4
 80036e2:	602a      	str	r2, [r5, #0]
 80036e4:	681d      	ldr	r5, [r3, #0]
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	2100      	movs	r1, #0
 80036ea:	4628      	mov	r0, r5
 80036ec:	f7fc fd78 	bl	80001e0 <memchr>
 80036f0:	b108      	cbz	r0, 80036f6 <_printf_i+0x1f2>
 80036f2:	1b40      	subs	r0, r0, r5
 80036f4:	6060      	str	r0, [r4, #4]
 80036f6:	6863      	ldr	r3, [r4, #4]
 80036f8:	6123      	str	r3, [r4, #16]
 80036fa:	2300      	movs	r3, #0
 80036fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003700:	e7a8      	b.n	8003654 <_printf_i+0x150>
 8003702:	6923      	ldr	r3, [r4, #16]
 8003704:	462a      	mov	r2, r5
 8003706:	4649      	mov	r1, r9
 8003708:	4640      	mov	r0, r8
 800370a:	47d0      	blx	sl
 800370c:	3001      	adds	r0, #1
 800370e:	d0ab      	beq.n	8003668 <_printf_i+0x164>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	079b      	lsls	r3, r3, #30
 8003714:	d413      	bmi.n	800373e <_printf_i+0x23a>
 8003716:	68e0      	ldr	r0, [r4, #12]
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	4298      	cmp	r0, r3
 800371c:	bfb8      	it	lt
 800371e:	4618      	movlt	r0, r3
 8003720:	e7a4      	b.n	800366c <_printf_i+0x168>
 8003722:	2301      	movs	r3, #1
 8003724:	4632      	mov	r2, r6
 8003726:	4649      	mov	r1, r9
 8003728:	4640      	mov	r0, r8
 800372a:	47d0      	blx	sl
 800372c:	3001      	adds	r0, #1
 800372e:	d09b      	beq.n	8003668 <_printf_i+0x164>
 8003730:	3501      	adds	r5, #1
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	9903      	ldr	r1, [sp, #12]
 8003736:	1a5b      	subs	r3, r3, r1
 8003738:	42ab      	cmp	r3, r5
 800373a:	dcf2      	bgt.n	8003722 <_printf_i+0x21e>
 800373c:	e7eb      	b.n	8003716 <_printf_i+0x212>
 800373e:	2500      	movs	r5, #0
 8003740:	f104 0619 	add.w	r6, r4, #25
 8003744:	e7f5      	b.n	8003732 <_printf_i+0x22e>
 8003746:	bf00      	nop
 8003748:	08003dfd 	.word	0x08003dfd
 800374c:	08003e0e 	.word	0x08003e0e

08003750 <_sbrk_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4d06      	ldr	r5, [pc, #24]	; (800376c <_sbrk_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	f7fd fe2a 	bl	80013b4 <_sbrk>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_sbrk_r+0x1a>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	b103      	cbz	r3, 800376a <_sbrk_r+0x1a>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	20000138 	.word	0x20000138

08003770 <__sread>:
 8003770:	b510      	push	{r4, lr}
 8003772:	460c      	mov	r4, r1
 8003774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003778:	f000 fab2 	bl	8003ce0 <_read_r>
 800377c:	2800      	cmp	r0, #0
 800377e:	bfab      	itete	ge
 8003780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003782:	89a3      	ldrhlt	r3, [r4, #12]
 8003784:	181b      	addge	r3, r3, r0
 8003786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800378a:	bfac      	ite	ge
 800378c:	6563      	strge	r3, [r4, #84]	; 0x54
 800378e:	81a3      	strhlt	r3, [r4, #12]
 8003790:	bd10      	pop	{r4, pc}

08003792 <__swrite>:
 8003792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003796:	461f      	mov	r7, r3
 8003798:	898b      	ldrh	r3, [r1, #12]
 800379a:	05db      	lsls	r3, r3, #23
 800379c:	4605      	mov	r5, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	4616      	mov	r6, r2
 80037a2:	d505      	bpl.n	80037b0 <__swrite+0x1e>
 80037a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a8:	2302      	movs	r3, #2
 80037aa:	2200      	movs	r2, #0
 80037ac:	f000 f9c8 	bl	8003b40 <_lseek_r>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037ba:	81a3      	strh	r3, [r4, #12]
 80037bc:	4632      	mov	r2, r6
 80037be:	463b      	mov	r3, r7
 80037c0:	4628      	mov	r0, r5
 80037c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037c6:	f000 b869 	b.w	800389c <_write_r>

080037ca <__sseek>:
 80037ca:	b510      	push	{r4, lr}
 80037cc:	460c      	mov	r4, r1
 80037ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d2:	f000 f9b5 	bl	8003b40 <_lseek_r>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	bf15      	itete	ne
 80037dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80037de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037e6:	81a3      	strheq	r3, [r4, #12]
 80037e8:	bf18      	it	ne
 80037ea:	81a3      	strhne	r3, [r4, #12]
 80037ec:	bd10      	pop	{r4, pc}

080037ee <__sclose>:
 80037ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f2:	f000 b8d3 	b.w	800399c <_close_r>
	...

080037f8 <__swbuf_r>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	460e      	mov	r6, r1
 80037fc:	4614      	mov	r4, r2
 80037fe:	4605      	mov	r5, r0
 8003800:	b118      	cbz	r0, 800380a <__swbuf_r+0x12>
 8003802:	6983      	ldr	r3, [r0, #24]
 8003804:	b90b      	cbnz	r3, 800380a <__swbuf_r+0x12>
 8003806:	f7ff fb81 	bl	8002f0c <__sinit>
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <__swbuf_r+0x98>)
 800380c:	429c      	cmp	r4, r3
 800380e:	d12b      	bne.n	8003868 <__swbuf_r+0x70>
 8003810:	686c      	ldr	r4, [r5, #4]
 8003812:	69a3      	ldr	r3, [r4, #24]
 8003814:	60a3      	str	r3, [r4, #8]
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	071a      	lsls	r2, r3, #28
 800381a:	d52f      	bpl.n	800387c <__swbuf_r+0x84>
 800381c:	6923      	ldr	r3, [r4, #16]
 800381e:	b36b      	cbz	r3, 800387c <__swbuf_r+0x84>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	1ac0      	subs	r0, r0, r3
 8003826:	6963      	ldr	r3, [r4, #20]
 8003828:	b2f6      	uxtb	r6, r6
 800382a:	4283      	cmp	r3, r0
 800382c:	4637      	mov	r7, r6
 800382e:	dc04      	bgt.n	800383a <__swbuf_r+0x42>
 8003830:	4621      	mov	r1, r4
 8003832:	4628      	mov	r0, r5
 8003834:	f000 f948 	bl	8003ac8 <_fflush_r>
 8003838:	bb30      	cbnz	r0, 8003888 <__swbuf_r+0x90>
 800383a:	68a3      	ldr	r3, [r4, #8]
 800383c:	3b01      	subs	r3, #1
 800383e:	60a3      	str	r3, [r4, #8]
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	6022      	str	r2, [r4, #0]
 8003846:	701e      	strb	r6, [r3, #0]
 8003848:	6963      	ldr	r3, [r4, #20]
 800384a:	3001      	adds	r0, #1
 800384c:	4283      	cmp	r3, r0
 800384e:	d004      	beq.n	800385a <__swbuf_r+0x62>
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	07db      	lsls	r3, r3, #31
 8003854:	d506      	bpl.n	8003864 <__swbuf_r+0x6c>
 8003856:	2e0a      	cmp	r6, #10
 8003858:	d104      	bne.n	8003864 <__swbuf_r+0x6c>
 800385a:	4621      	mov	r1, r4
 800385c:	4628      	mov	r0, r5
 800385e:	f000 f933 	bl	8003ac8 <_fflush_r>
 8003862:	b988      	cbnz	r0, 8003888 <__swbuf_r+0x90>
 8003864:	4638      	mov	r0, r7
 8003866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <__swbuf_r+0x9c>)
 800386a:	429c      	cmp	r4, r3
 800386c:	d101      	bne.n	8003872 <__swbuf_r+0x7a>
 800386e:	68ac      	ldr	r4, [r5, #8]
 8003870:	e7cf      	b.n	8003812 <__swbuf_r+0x1a>
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <__swbuf_r+0xa0>)
 8003874:	429c      	cmp	r4, r3
 8003876:	bf08      	it	eq
 8003878:	68ec      	ldreq	r4, [r5, #12]
 800387a:	e7ca      	b.n	8003812 <__swbuf_r+0x1a>
 800387c:	4621      	mov	r1, r4
 800387e:	4628      	mov	r0, r5
 8003880:	f000 f81e 	bl	80038c0 <__swsetup_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	d0cb      	beq.n	8003820 <__swbuf_r+0x28>
 8003888:	f04f 37ff 	mov.w	r7, #4294967295
 800388c:	e7ea      	b.n	8003864 <__swbuf_r+0x6c>
 800388e:	bf00      	nop
 8003890:	08003dac 	.word	0x08003dac
 8003894:	08003dcc 	.word	0x08003dcc
 8003898:	08003d8c 	.word	0x08003d8c

0800389c <_write_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d07      	ldr	r5, [pc, #28]	; (80038bc <_write_r+0x20>)
 80038a0:	4604      	mov	r4, r0
 80038a2:	4608      	mov	r0, r1
 80038a4:	4611      	mov	r1, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7fd fc2e 	bl	800110c <_write>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_write_r+0x1e>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_write_r+0x1e>
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	20000138 	.word	0x20000138

080038c0 <__swsetup_r>:
 80038c0:	4b32      	ldr	r3, [pc, #200]	; (800398c <__swsetup_r+0xcc>)
 80038c2:	b570      	push	{r4, r5, r6, lr}
 80038c4:	681d      	ldr	r5, [r3, #0]
 80038c6:	4606      	mov	r6, r0
 80038c8:	460c      	mov	r4, r1
 80038ca:	b125      	cbz	r5, 80038d6 <__swsetup_r+0x16>
 80038cc:	69ab      	ldr	r3, [r5, #24]
 80038ce:	b913      	cbnz	r3, 80038d6 <__swsetup_r+0x16>
 80038d0:	4628      	mov	r0, r5
 80038d2:	f7ff fb1b 	bl	8002f0c <__sinit>
 80038d6:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <__swsetup_r+0xd0>)
 80038d8:	429c      	cmp	r4, r3
 80038da:	d10f      	bne.n	80038fc <__swsetup_r+0x3c>
 80038dc:	686c      	ldr	r4, [r5, #4]
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038e4:	0719      	lsls	r1, r3, #28
 80038e6:	d42c      	bmi.n	8003942 <__swsetup_r+0x82>
 80038e8:	06dd      	lsls	r5, r3, #27
 80038ea:	d411      	bmi.n	8003910 <__swsetup_r+0x50>
 80038ec:	2309      	movs	r3, #9
 80038ee:	6033      	str	r3, [r6, #0]
 80038f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038f4:	81a3      	strh	r3, [r4, #12]
 80038f6:	f04f 30ff 	mov.w	r0, #4294967295
 80038fa:	e03e      	b.n	800397a <__swsetup_r+0xba>
 80038fc:	4b25      	ldr	r3, [pc, #148]	; (8003994 <__swsetup_r+0xd4>)
 80038fe:	429c      	cmp	r4, r3
 8003900:	d101      	bne.n	8003906 <__swsetup_r+0x46>
 8003902:	68ac      	ldr	r4, [r5, #8]
 8003904:	e7eb      	b.n	80038de <__swsetup_r+0x1e>
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <__swsetup_r+0xd8>)
 8003908:	429c      	cmp	r4, r3
 800390a:	bf08      	it	eq
 800390c:	68ec      	ldreq	r4, [r5, #12]
 800390e:	e7e6      	b.n	80038de <__swsetup_r+0x1e>
 8003910:	0758      	lsls	r0, r3, #29
 8003912:	d512      	bpl.n	800393a <__swsetup_r+0x7a>
 8003914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003916:	b141      	cbz	r1, 800392a <__swsetup_r+0x6a>
 8003918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800391c:	4299      	cmp	r1, r3
 800391e:	d002      	beq.n	8003926 <__swsetup_r+0x66>
 8003920:	4630      	mov	r0, r6
 8003922:	f000 f991 	bl	8003c48 <_free_r>
 8003926:	2300      	movs	r3, #0
 8003928:	6363      	str	r3, [r4, #52]	; 0x34
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003930:	81a3      	strh	r3, [r4, #12]
 8003932:	2300      	movs	r3, #0
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	6923      	ldr	r3, [r4, #16]
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	89a3      	ldrh	r3, [r4, #12]
 800393c:	f043 0308 	orr.w	r3, r3, #8
 8003940:	81a3      	strh	r3, [r4, #12]
 8003942:	6923      	ldr	r3, [r4, #16]
 8003944:	b94b      	cbnz	r3, 800395a <__swsetup_r+0x9a>
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800394c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003950:	d003      	beq.n	800395a <__swsetup_r+0x9a>
 8003952:	4621      	mov	r1, r4
 8003954:	4630      	mov	r0, r6
 8003956:	f000 f92b 	bl	8003bb0 <__smakebuf_r>
 800395a:	89a0      	ldrh	r0, [r4, #12]
 800395c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003960:	f010 0301 	ands.w	r3, r0, #1
 8003964:	d00a      	beq.n	800397c <__swsetup_r+0xbc>
 8003966:	2300      	movs	r3, #0
 8003968:	60a3      	str	r3, [r4, #8]
 800396a:	6963      	ldr	r3, [r4, #20]
 800396c:	425b      	negs	r3, r3
 800396e:	61a3      	str	r3, [r4, #24]
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	b943      	cbnz	r3, 8003986 <__swsetup_r+0xc6>
 8003974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003978:	d1ba      	bne.n	80038f0 <__swsetup_r+0x30>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	0781      	lsls	r1, r0, #30
 800397e:	bf58      	it	pl
 8003980:	6963      	ldrpl	r3, [r4, #20]
 8003982:	60a3      	str	r3, [r4, #8]
 8003984:	e7f4      	b.n	8003970 <__swsetup_r+0xb0>
 8003986:	2000      	movs	r0, #0
 8003988:	e7f7      	b.n	800397a <__swsetup_r+0xba>
 800398a:	bf00      	nop
 800398c:	2000000c 	.word	0x2000000c
 8003990:	08003dac 	.word	0x08003dac
 8003994:	08003dcc 	.word	0x08003dcc
 8003998:	08003d8c 	.word	0x08003d8c

0800399c <_close_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d06      	ldr	r5, [pc, #24]	; (80039b8 <_close_r+0x1c>)
 80039a0:	2300      	movs	r3, #0
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	f7fd fccf 	bl	800134a <_close>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_close_r+0x1a>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_close_r+0x1a>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	20000138 	.word	0x20000138

080039bc <__sflush_r>:
 80039bc:	898a      	ldrh	r2, [r1, #12]
 80039be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	0710      	lsls	r0, r2, #28
 80039c6:	460c      	mov	r4, r1
 80039c8:	d458      	bmi.n	8003a7c <__sflush_r+0xc0>
 80039ca:	684b      	ldr	r3, [r1, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	dc05      	bgt.n	80039dc <__sflush_r+0x20>
 80039d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	dc02      	bgt.n	80039dc <__sflush_r+0x20>
 80039d6:	2000      	movs	r0, #0
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039de:	2e00      	cmp	r6, #0
 80039e0:	d0f9      	beq.n	80039d6 <__sflush_r+0x1a>
 80039e2:	2300      	movs	r3, #0
 80039e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039e8:	682f      	ldr	r7, [r5, #0]
 80039ea:	602b      	str	r3, [r5, #0]
 80039ec:	d032      	beq.n	8003a54 <__sflush_r+0x98>
 80039ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	075a      	lsls	r2, r3, #29
 80039f4:	d505      	bpl.n	8003a02 <__sflush_r+0x46>
 80039f6:	6863      	ldr	r3, [r4, #4]
 80039f8:	1ac0      	subs	r0, r0, r3
 80039fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039fc:	b10b      	cbz	r3, 8003a02 <__sflush_r+0x46>
 80039fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a00:	1ac0      	subs	r0, r0, r3
 8003a02:	2300      	movs	r3, #0
 8003a04:	4602      	mov	r2, r0
 8003a06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a08:	6a21      	ldr	r1, [r4, #32]
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	47b0      	blx	r6
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	d106      	bne.n	8003a22 <__sflush_r+0x66>
 8003a14:	6829      	ldr	r1, [r5, #0]
 8003a16:	291d      	cmp	r1, #29
 8003a18:	d82c      	bhi.n	8003a74 <__sflush_r+0xb8>
 8003a1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <__sflush_r+0x108>)
 8003a1c:	40ca      	lsrs	r2, r1
 8003a1e:	07d6      	lsls	r6, r2, #31
 8003a20:	d528      	bpl.n	8003a74 <__sflush_r+0xb8>
 8003a22:	2200      	movs	r2, #0
 8003a24:	6062      	str	r2, [r4, #4]
 8003a26:	04d9      	lsls	r1, r3, #19
 8003a28:	6922      	ldr	r2, [r4, #16]
 8003a2a:	6022      	str	r2, [r4, #0]
 8003a2c:	d504      	bpl.n	8003a38 <__sflush_r+0x7c>
 8003a2e:	1c42      	adds	r2, r0, #1
 8003a30:	d101      	bne.n	8003a36 <__sflush_r+0x7a>
 8003a32:	682b      	ldr	r3, [r5, #0]
 8003a34:	b903      	cbnz	r3, 8003a38 <__sflush_r+0x7c>
 8003a36:	6560      	str	r0, [r4, #84]	; 0x54
 8003a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a3a:	602f      	str	r7, [r5, #0]
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	d0ca      	beq.n	80039d6 <__sflush_r+0x1a>
 8003a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a44:	4299      	cmp	r1, r3
 8003a46:	d002      	beq.n	8003a4e <__sflush_r+0x92>
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 f8fd 	bl	8003c48 <_free_r>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	6360      	str	r0, [r4, #52]	; 0x34
 8003a52:	e7c1      	b.n	80039d8 <__sflush_r+0x1c>
 8003a54:	6a21      	ldr	r1, [r4, #32]
 8003a56:	2301      	movs	r3, #1
 8003a58:	4628      	mov	r0, r5
 8003a5a:	47b0      	blx	r6
 8003a5c:	1c41      	adds	r1, r0, #1
 8003a5e:	d1c7      	bne.n	80039f0 <__sflush_r+0x34>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0c4      	beq.n	80039f0 <__sflush_r+0x34>
 8003a66:	2b1d      	cmp	r3, #29
 8003a68:	d001      	beq.n	8003a6e <__sflush_r+0xb2>
 8003a6a:	2b16      	cmp	r3, #22
 8003a6c:	d101      	bne.n	8003a72 <__sflush_r+0xb6>
 8003a6e:	602f      	str	r7, [r5, #0]
 8003a70:	e7b1      	b.n	80039d6 <__sflush_r+0x1a>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a78:	81a3      	strh	r3, [r4, #12]
 8003a7a:	e7ad      	b.n	80039d8 <__sflush_r+0x1c>
 8003a7c:	690f      	ldr	r7, [r1, #16]
 8003a7e:	2f00      	cmp	r7, #0
 8003a80:	d0a9      	beq.n	80039d6 <__sflush_r+0x1a>
 8003a82:	0793      	lsls	r3, r2, #30
 8003a84:	680e      	ldr	r6, [r1, #0]
 8003a86:	bf08      	it	eq
 8003a88:	694b      	ldreq	r3, [r1, #20]
 8003a8a:	600f      	str	r7, [r1, #0]
 8003a8c:	bf18      	it	ne
 8003a8e:	2300      	movne	r3, #0
 8003a90:	eba6 0807 	sub.w	r8, r6, r7
 8003a94:	608b      	str	r3, [r1, #8]
 8003a96:	f1b8 0f00 	cmp.w	r8, #0
 8003a9a:	dd9c      	ble.n	80039d6 <__sflush_r+0x1a>
 8003a9c:	6a21      	ldr	r1, [r4, #32]
 8003a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	463a      	mov	r2, r7
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	47b0      	blx	r6
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	dc06      	bgt.n	8003aba <__sflush_r+0xfe>
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab2:	81a3      	strh	r3, [r4, #12]
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	e78e      	b.n	80039d8 <__sflush_r+0x1c>
 8003aba:	4407      	add	r7, r0
 8003abc:	eba8 0800 	sub.w	r8, r8, r0
 8003ac0:	e7e9      	b.n	8003a96 <__sflush_r+0xda>
 8003ac2:	bf00      	nop
 8003ac4:	20400001 	.word	0x20400001

08003ac8 <_fflush_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	690b      	ldr	r3, [r1, #16]
 8003acc:	4605      	mov	r5, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	b913      	cbnz	r3, 8003ad8 <_fflush_r+0x10>
 8003ad2:	2500      	movs	r5, #0
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	b118      	cbz	r0, 8003ae2 <_fflush_r+0x1a>
 8003ada:	6983      	ldr	r3, [r0, #24]
 8003adc:	b90b      	cbnz	r3, 8003ae2 <_fflush_r+0x1a>
 8003ade:	f7ff fa15 	bl	8002f0c <__sinit>
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <_fflush_r+0x6c>)
 8003ae4:	429c      	cmp	r4, r3
 8003ae6:	d11b      	bne.n	8003b20 <_fflush_r+0x58>
 8003ae8:	686c      	ldr	r4, [r5, #4]
 8003aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ef      	beq.n	8003ad2 <_fflush_r+0xa>
 8003af2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003af4:	07d0      	lsls	r0, r2, #31
 8003af6:	d404      	bmi.n	8003b02 <_fflush_r+0x3a>
 8003af8:	0599      	lsls	r1, r3, #22
 8003afa:	d402      	bmi.n	8003b02 <_fflush_r+0x3a>
 8003afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003afe:	f7ff faa3 	bl	8003048 <__retarget_lock_acquire_recursive>
 8003b02:	4628      	mov	r0, r5
 8003b04:	4621      	mov	r1, r4
 8003b06:	f7ff ff59 	bl	80039bc <__sflush_r>
 8003b0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b0c:	07da      	lsls	r2, r3, #31
 8003b0e:	4605      	mov	r5, r0
 8003b10:	d4e0      	bmi.n	8003ad4 <_fflush_r+0xc>
 8003b12:	89a3      	ldrh	r3, [r4, #12]
 8003b14:	059b      	lsls	r3, r3, #22
 8003b16:	d4dd      	bmi.n	8003ad4 <_fflush_r+0xc>
 8003b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b1a:	f7ff fa96 	bl	800304a <__retarget_lock_release_recursive>
 8003b1e:	e7d9      	b.n	8003ad4 <_fflush_r+0xc>
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <_fflush_r+0x70>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	d101      	bne.n	8003b2a <_fflush_r+0x62>
 8003b26:	68ac      	ldr	r4, [r5, #8]
 8003b28:	e7df      	b.n	8003aea <_fflush_r+0x22>
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <_fflush_r+0x74>)
 8003b2c:	429c      	cmp	r4, r3
 8003b2e:	bf08      	it	eq
 8003b30:	68ec      	ldreq	r4, [r5, #12]
 8003b32:	e7da      	b.n	8003aea <_fflush_r+0x22>
 8003b34:	08003dac 	.word	0x08003dac
 8003b38:	08003dcc 	.word	0x08003dcc
 8003b3c:	08003d8c 	.word	0x08003d8c

08003b40 <_lseek_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4d07      	ldr	r5, [pc, #28]	; (8003b60 <_lseek_r+0x20>)
 8003b44:	4604      	mov	r4, r0
 8003b46:	4608      	mov	r0, r1
 8003b48:	4611      	mov	r1, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	602a      	str	r2, [r5, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f7fd fc22 	bl	8001398 <_lseek>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d102      	bne.n	8003b5e <_lseek_r+0x1e>
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	b103      	cbz	r3, 8003b5e <_lseek_r+0x1e>
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	20000138 	.word	0x20000138

08003b64 <__swhatbuf_r>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	460e      	mov	r6, r1
 8003b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b6c:	2900      	cmp	r1, #0
 8003b6e:	b096      	sub	sp, #88	; 0x58
 8003b70:	4614      	mov	r4, r2
 8003b72:	461d      	mov	r5, r3
 8003b74:	da08      	bge.n	8003b88 <__swhatbuf_r+0x24>
 8003b76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	602a      	str	r2, [r5, #0]
 8003b7e:	061a      	lsls	r2, r3, #24
 8003b80:	d410      	bmi.n	8003ba4 <__swhatbuf_r+0x40>
 8003b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b86:	e00e      	b.n	8003ba6 <__swhatbuf_r+0x42>
 8003b88:	466a      	mov	r2, sp
 8003b8a:	f000 f8bb 	bl	8003d04 <_fstat_r>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	dbf1      	blt.n	8003b76 <__swhatbuf_r+0x12>
 8003b92:	9a01      	ldr	r2, [sp, #4]
 8003b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b9c:	425a      	negs	r2, r3
 8003b9e:	415a      	adcs	r2, r3
 8003ba0:	602a      	str	r2, [r5, #0]
 8003ba2:	e7ee      	b.n	8003b82 <__swhatbuf_r+0x1e>
 8003ba4:	2340      	movs	r3, #64	; 0x40
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	b016      	add	sp, #88	; 0x58
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08003bb0 <__smakebuf_r>:
 8003bb0:	898b      	ldrh	r3, [r1, #12]
 8003bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bb4:	079d      	lsls	r5, r3, #30
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	460c      	mov	r4, r1
 8003bba:	d507      	bpl.n	8003bcc <__smakebuf_r+0x1c>
 8003bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	6123      	str	r3, [r4, #16]
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	6163      	str	r3, [r4, #20]
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	ab01      	add	r3, sp, #4
 8003bce:	466a      	mov	r2, sp
 8003bd0:	f7ff ffc8 	bl	8003b64 <__swhatbuf_r>
 8003bd4:	9900      	ldr	r1, [sp, #0]
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f7ff fa57 	bl	800308c <_malloc_r>
 8003bde:	b948      	cbnz	r0, 8003bf4 <__smakebuf_r+0x44>
 8003be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be4:	059a      	lsls	r2, r3, #22
 8003be6:	d4ef      	bmi.n	8003bc8 <__smakebuf_r+0x18>
 8003be8:	f023 0303 	bic.w	r3, r3, #3
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	e7e3      	b.n	8003bbc <__smakebuf_r+0xc>
 8003bf4:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <__smakebuf_r+0x7c>)
 8003bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	6020      	str	r0, [r4, #0]
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	9b00      	ldr	r3, [sp, #0]
 8003c04:	6163      	str	r3, [r4, #20]
 8003c06:	9b01      	ldr	r3, [sp, #4]
 8003c08:	6120      	str	r0, [r4, #16]
 8003c0a:	b15b      	cbz	r3, 8003c24 <__smakebuf_r+0x74>
 8003c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c10:	4630      	mov	r0, r6
 8003c12:	f000 f889 	bl	8003d28 <_isatty_r>
 8003c16:	b128      	cbz	r0, 8003c24 <__smakebuf_r+0x74>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	89a0      	ldrh	r0, [r4, #12]
 8003c26:	4305      	orrs	r5, r0
 8003c28:	81a5      	strh	r5, [r4, #12]
 8003c2a:	e7cd      	b.n	8003bc8 <__smakebuf_r+0x18>
 8003c2c:	08002ea5 	.word	0x08002ea5

08003c30 <__malloc_lock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_lock+0x8>)
 8003c32:	f7ff ba09 	b.w	8003048 <__retarget_lock_acquire_recursive>
 8003c36:	bf00      	nop
 8003c38:	2000012c 	.word	0x2000012c

08003c3c <__malloc_unlock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	; (8003c44 <__malloc_unlock+0x8>)
 8003c3e:	f7ff ba04 	b.w	800304a <__retarget_lock_release_recursive>
 8003c42:	bf00      	nop
 8003c44:	2000012c 	.word	0x2000012c

08003c48 <_free_r>:
 8003c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d044      	beq.n	8003cd8 <_free_r+0x90>
 8003c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c52:	9001      	str	r0, [sp, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f1a1 0404 	sub.w	r4, r1, #4
 8003c5a:	bfb8      	it	lt
 8003c5c:	18e4      	addlt	r4, r4, r3
 8003c5e:	f7ff ffe7 	bl	8003c30 <__malloc_lock>
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <_free_r+0x94>)
 8003c64:	9801      	ldr	r0, [sp, #4]
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	b933      	cbnz	r3, 8003c78 <_free_r+0x30>
 8003c6a:	6063      	str	r3, [r4, #4]
 8003c6c:	6014      	str	r4, [r2, #0]
 8003c6e:	b003      	add	sp, #12
 8003c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c74:	f7ff bfe2 	b.w	8003c3c <__malloc_unlock>
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	d908      	bls.n	8003c8e <_free_r+0x46>
 8003c7c:	6825      	ldr	r5, [r4, #0]
 8003c7e:	1961      	adds	r1, r4, r5
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf01      	itttt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	1949      	addeq	r1, r1, r5
 8003c8a:	6021      	streq	r1, [r4, #0]
 8003c8c:	e7ed      	b.n	8003c6a <_free_r+0x22>
 8003c8e:	461a      	mov	r2, r3
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b10b      	cbz	r3, 8003c98 <_free_r+0x50>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d9fa      	bls.n	8003c8e <_free_r+0x46>
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	1855      	adds	r5, r2, r1
 8003c9c:	42a5      	cmp	r5, r4
 8003c9e:	d10b      	bne.n	8003cb8 <_free_r+0x70>
 8003ca0:	6824      	ldr	r4, [r4, #0]
 8003ca2:	4421      	add	r1, r4
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	d1e0      	bne.n	8003c6e <_free_r+0x26>
 8003cac:	681c      	ldr	r4, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6053      	str	r3, [r2, #4]
 8003cb2:	4421      	add	r1, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	e7da      	b.n	8003c6e <_free_r+0x26>
 8003cb8:	d902      	bls.n	8003cc0 <_free_r+0x78>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	6003      	str	r3, [r0, #0]
 8003cbe:	e7d6      	b.n	8003c6e <_free_r+0x26>
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf04      	itt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	bf04      	itt	eq
 8003cd0:	1949      	addeq	r1, r1, r5
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6054      	str	r4, [r2, #4]
 8003cd6:	e7ca      	b.n	8003c6e <_free_r+0x26>
 8003cd8:	b003      	add	sp, #12
 8003cda:	bd30      	pop	{r4, r5, pc}
 8003cdc:	20000130 	.word	0x20000130

08003ce0 <_read_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4d07      	ldr	r5, [pc, #28]	; (8003d00 <_read_r+0x20>)
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	602a      	str	r2, [r5, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7fd fb0e 	bl	8001310 <_read>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_read_r+0x1e>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_read_r+0x1e>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20000138 	.word	0x20000138

08003d04 <_fstat_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4d07      	ldr	r5, [pc, #28]	; (8003d24 <_fstat_r+0x20>)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	f7fd fb26 	bl	8001362 <_fstat>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d102      	bne.n	8003d20 <_fstat_r+0x1c>
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	b103      	cbz	r3, 8003d20 <_fstat_r+0x1c>
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20000138 	.word	0x20000138

08003d28 <_isatty_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4d06      	ldr	r5, [pc, #24]	; (8003d44 <_isatty_r+0x1c>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4604      	mov	r4, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	f7fd fb25 	bl	8001382 <_isatty>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_isatty_r+0x1a>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_isatty_r+0x1a>
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	20000138 	.word	0x20000138

08003d48 <_init>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr

08003d54 <_fini>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr
