/*
 * localization.h
 *
 *  Created on: 30 พ.ค. 2566
 *      Author: LENOVO
 */

#ifndef INC_LOCALIZATION_H_
#define INC_LOCALIZATION_H_

// PRIVATE INCLUDE

#include <math.h>

// PRIVATE TYPEDEF ================================================================================

typedef struct {
	int x;
	int y;
} Coordinate;

// PRIVATE FUNCTION PROTOTYPE =====================================================================

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2);
void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle);
float calculateNorm(Coordinate coord);

// USER CODE ======================================================================================

void localize(Coordinate *inputs, Coordinate *outputs, Coordinate *origin, float *angle) {
	Coordinate point1 = inputs[0];
	Coordinate point2 = inputs[1];
	Coordinate point3 = inputs[2];
	Coordinate vectA = subtractCoordinates(point2, point1);
	Coordinate vectB = subtractCoordinates(point3, point2);
	Coordinate vectC = subtractCoordinates(point3, point1);
	float lenA = calculateNorm(vectA);
	float lenB = calculateNorm(vectB);
	float lenC = calculateNorm(vectC);
	Coordinate vector1;
	Coordinate vector2;

	if (lenA < lenB && lenB < lenC && lenA < lenC) {
		// CASE 1
		origin = point2;
		vector1 = vectB;
		vector2 = -vectA;
	} else if (lenC < lenB && lenB < lenA && lenC < lenA) {
		// CASE 2
		origin = point2;
		vector1 = vectB;
		vector2 = -vectA;
	} else if (lenA < lenC && lenC < lenB && lenA < lenB) {
		// CASE 3
		origin = point2;
		vector1 = vectB;
		vector2 = -vectA;
	} else if (lenC < lenA && lenA < lenB && lenC < lenB) {
		// CASE 4
		origin = point2;
		vector1 = vectB;
		vector2 = -vectA;
	} else if (lenB < lenC && lenC < lenA && lenB < lenA) {
		// CASE 5
		origin = point2;
		vector1 = vectB;
		vector2 = -vectA;
	} else if (lenB < lenA && lenA < lenC && lenB < lenC) {
		// CASE 6
		origin = point2;
		vector1 = vectB;
		vector2 = -vectA;
	}
}

Coordinate subtractCoordinates(Coordinate coord1, Coordinate coord2) {
	Coordinate result;
	result.x = coord1.x - coord2.x;
	result.y = coord1.y - coord2.y;
	return result;
}

float calculateNorm(Coordinate coord) {
	float norm = sqrt(coord.x * coord.x + coord.y * coord.y);
	return norm;
}

#endif /* INC_LOCALIZATION_H_ */
