#ifndef INC_RGB_H_
#define INC_RGB_H_

// PRIVATE INCLUDE ================================================================================

#include <WS2812B.h>

// PRIVATE FUNCTION PROTOTYPE =====================================================================

uint32_t LERP(uint32_t start, uint32_t end, float t);
void RGB_Rainbow(void);

// USER CODE ======================================================================================

void RGB_Rainbow(void) {
	static uint8_t hue = 0;
	static uint8_t reverse = 0;

	uint32_t time = 0;
	if (HAL_GetTick() - time >= 50) {
		time = HAL_GetTick() + 50;

		// Update hue
		if (!reverse) {
			hue++;
			if (hue >= 255) {
				reverse = 1;
			}
		} else {
			hue--;
			if (hue <= 0) {
				reverse = 0;
			}
		}

		// Calculate color gradient
		uint32_t colorStart = hue;
		uint32_t colorEnd = (hue + 85) % 255;

		// Set LED colors based on color gradient
		for (int i = 0; i < MAX_LED; i++) {
			uint32_t color = LERP(colorStart, colorEnd, (float) i / MAX_LED);
			Set_LED(i, color, 255 - color, 0);
		}

		// Send LED data to update colors
		WS2812_Send();
		Set_Brightness(45);
	}
}

uint32_t LERP(uint32_t start, uint32_t end, float t) {
	uint8_t startR = (start >> 16) & 0xFF;
	uint8_t startG = (start >> 8) & 0xFF;
	uint8_t startB = start & 0xFF;

	uint8_t endR = (end >> 16) & 0xFF;
	uint8_t endG = (end >> 8) & 0xFF;
	uint8_t endB = end & 0xFF;

	uint8_t interpolatedR = (uint8_t) ((1 - t) * startR + t * endR);
	uint8_t interpolatedG = (uint8_t) ((1 - t) * startG + t * endG);
	uint8_t interpolatedB = (uint8_t) ((1 - t) * startB + t * endB);

	return (interpolatedR << 16) | (interpolatedG << 8) | interpolatedB;
}

#endif /* INC_RGB_H_ */
